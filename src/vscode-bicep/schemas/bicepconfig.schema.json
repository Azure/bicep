{
  "$comment1": "=========================================================================================================",
  "$comment2": "IMPORTANT: This file is for intelliSense only (for VS Code), it does *not* affect the actual bicepconfig.json defaults.",
  "$comment3": "  Actual defaults picked up by configuration at runtime are in src/Bicep.Core/Configuration/bicepconfig.json",
  "$comment4": "  If you make changes to this file, remember to update the rule documentation.",
  "$comment5": "                                                                                                        ",
  "$comment6": "Also, please add appropriate tests in Bicep.Core.UnitTests.Configuration.BicepConfigSchemaTests to verify this file's contents'",
  "$comment9": "=========================================================================================================",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Bicep Configuration",
  "definitions": {
    "level": {
      "title": "Diagnostic Level",
      "description": "Type of diagnostic to display, most rules default to warning",
      "type": "string",
      "enum": ["off", "info", "warning", "error"]
    },
    "rule-def-level-warning": {
      "type": "object",
      "default": {
        "level": "warning"
      },
      "properties": {
        "level": {
          "$ref": "#/definitions/level"
        }
      },
      "required": ["level"]
    },
    "rule-def-level-error": {
      "type": "object",
      "default": {
        "level": "error"
      },
      "properties": {
        "level": {
          "$ref": "#/definitions/level"
        }
      },
      "required": ["level"]
    },
    "rule-def-level-off": {
      "type": "object",
      "default": {
        "level": "off"
      },
      "properties": {
        "level": {
          "$ref": "#/definitions/level"
        }
      },
      "required": ["level"]
    },
    "cloudProfile": {
      "type": "object",
      "additionalProperties": false,
      "required": ["resourceManagerEndpoint", "activeDirectoryAuthority"],
      "properties": {
        "resourceManagerEndpoint": {
          "title": "Resource Manager Endpoint",
          "description": "The resource manager endpoint URL",
          "type": "string"
        },
        "activeDirectoryAuthority": {
          "title": "Active Directory Authority",
          "description": "The active directory authority URL",
          "type": "string"
        }
      }
    },
    "credentialType": {
      "title": "Credential Type",
      "description": "Type of credential to use for authentication when restoring external modules",
      "type": "string",
      "enum": [
        "Environment",
        "ManagedIdentity",
        "VisualStudio",
        "VisualStudioCode",
        "AzureCLI",
        "AzurePowerShell"
      ]
    },
    "templateSpecModuleAlias": {
      "type": "object",
      "additionalProperties": false,
      "required": ["subscription", "resourceGroup"],
      "properties": {
        "subscription": {
          "title": "Subscription ID",
          "description": "The subscription ID of the alias",
          "type": "string",
          "pattern": "^[0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12}$"
        },
        "resourceGroup": {
          "title": "Resource Group Name",
          "description": "The resource group name of the alias",
          "type": "string",
          "minLength": 1,
          "maxLength": 90,
          "pattern": "^[-\\w\\.\\(\\)]{0,89}[-\\w\\(\\)]$"
        }
      }
    },
    "bicepRegistryModuleAlias": {
      "type": "object",
      "additionalProperties": false,
      "required": ["registry"],
      "properties": {
        "registry": {
          "title": "Registry",
          "description": "The module registry of the alias",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "modulePath": {
          "title": "Module Path",
          "description": "The module path of the alias",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "providerConfig": {
      "type": "string",
      "pattern": "^(builtin:|br:.*)$"
    },
    "builtInConfig": {
      "type": "object",
      "properties": {
        "builtIn": {
          "type": "boolean"
        }
      },
      "required": ["builtIn"],
      "additionalProperties": false
    },
    "bicepRegistryProviderAlias": {
      "type": "object",
      "additionalProperties": false,
      "required": ["registry"],
      "properties": {
        "registry": {
          "title": "Registry",
          "description": "The OCI registry the alias is assigned to",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "providerPath": {
          "title": "Provider Path",
          "description": "The OCI repository address to use for the alias",
          "type": "string",
          "minLength": 1
        }
      }
    }
  },
  "type": "object",
  "default": {},
  "properties": {
    "cloud": {
      "title": "Cloud",
      "type": "object",
      "additionalProperties": false,
      "required": ["currentProfile"],
      "properties": {
        "currentProfile": {
          "title": "Current Profile",
          "description": "The current cloud profile",
          "anyOf": [
            {
              "enum": ["AzureCloud", "AzureChinaCloud", "AzureUSGovernment"]
            },
            {
              "type": "string"
            }
          ],
          "default": "AzureCloud"
        },
        "profiles": {
          "title": "Profiles",
          "description": "The clould profile definitions",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/cloudProfile"
          }
        },
        "credentialPrecedence": {
          "title": "Credential Precedence",
          "description": "Determines which types of credentials are used to authenticate and which order when restoring external modules.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/credentialType"
          },
          "minItems": 1,
          "uniqueItems": true
        },
        "credentialOptions": {
          "title": "Credential Options",
          "description": "Credential options for the credential types specified in credentialPrecedence.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "managedIdentity": {
              "title": "Managed Identity",
              "description": "The managed identity options",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "type": {
                  "title": "Managed Identity Type",
                  "description": "The managed identity type",
                  "type": "string",
                  "enum": ["SystemAssigned", "UserAssigned"],
                  "default": "SystemAssigned",
                  "enumDescriptions": [
                    "Use a system-assigned managed identity",
                    "Use a user-assigned managed identity"
                  ]
                },
                "clientId": {
                  "title": "Client ID",
                  "description": "The user-assigned managed identity client ID",
                  "type": "string",
                  "format": "uuid"
                },
                "resourceId": {
                  "title": "Resource ID",
                  "description": "The user-assigned managed identity resource ID",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "moduleAliases": {
      "title": "Module Aliases",
      "type": "object",
      "additionalProperties": false,
      "default": {
        "ts": {},
        "br": {}
      },
      "properties": {
        "ts": {
          "title": "Template Spec Module Aliases",
          "description": "Template Spec module alias definitions",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/templateSpecModuleAlias",
            "additionalProperties": false
          }
        },
        "br": {
          "title": "Bicep Registry Module Aliases",
          "description": "Bicep Registry module alias definitions",
          "additionalProperties": {
            "$ref": "#/definitions/bicepRegistryModuleAlias",
            "additionalProperties": false
          }
        }
      }
    },
    "providerAliases": {
      "title": "Module Aliases",
      "type": "object",
      "additionalProperties": false,
      "default": {
        "br": {}
      },
      "properties": {
        "br": {
          "title": "Bicep Registry Provider Aliases",
          "description": "Bicep Registry provider alias definitions",
          "additionalProperties": {
            "$ref": "#/definitions/bicepRegistryProviderAlias"
          }
        }
      }
    },
    "providers": {
      "title": "Resource Type Providers Configuration",
      "description": "Resource type providers configuration",
      "type": "object",
      "patternProperties": {
        "^(?!sys$).*": {
          "$ref": "#/definitions/providerConfig"
        }
      },
      "additionalProperties": false,
      "default": {
        "az": "builtin:",
        "kubernetes": "builtin:",
        "microsoftGraph": "builtin:"
      }
    },
    "implicitProviders": {
      "description": "Resource type providers that should be implicitly imported",
      "type": "array",
      "default": ["az"],
      "items": {
        "type": "string"
      },
      "additionalProperties": false
    },
    "analyzers": {
      "title": "Analyzers",
      "type": "object",
      "default": {
        "core": {
          "rules": {}
        }
      },
      "properties": {
        "core": {
          "title": "Core Bicep Analyzer",
          "description": "Core analyzer built into bicep",
          "type": "object",
          "required": [],
          "properties": {
            "verbose": {
              "type": "boolean",
              "default": false
            },
            "enabled": {
              "type": "boolean",
              "default": true
            },
            "rules": {
              "additionalProperties": false,
              "properties": {
                "adminusername-should-not-be-literal": {
                  "allOf": [
                    {
                      "description": "Property 'adminUserName' should not use a literal value. Use a param instead. See https://aka.ms/bicep/linter/adminusername-should-not-be-literal"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                },
                "artifacts-parameters": {
                  "allOf": [
                    {
                      "description": "Follow best practices when including the _artifactsLocation and _artifactsLocationSasToken parameters. See https://aka.ms/bicep/linter/artifacts-parameters"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                },
                "decompiler-cleanup": {
                  "allOf": [
                    {
                      "description": "Some decompiler imperfections may need to be cleaned up manually. See https://aka.ms/bicep/linter/decompiler-cleanup"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                },
                "explicit-values-for-loc-params": {
                  "allOf": [
                    {
                      "description": "When consuming a module, any location-related parameters that have a default value must be assigned an explicit value. See https://aka.ms/bicep/linter/explicit-values-for-loc-params"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                },
                "max-asserts": {
                  "allOf": [
                    {
                      "description": "Maximum number of 'assert' statements used. See https://aka.ms/bicep/linter/max-asserts"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-error"
                    }
                  ]
                },
                "max-outputs": {
                  "allOf": [
                    {
                      "description": "Maximum number of outputs used. See https://aka.ms/bicep/linter/max-outputs"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-error"
                    }
                  ]
                },
                "max-params": {
                  "allOf": [
                    {
                      "description": "Maximum number of parameters used. See https://aka.ms/bicep/linter/max-params"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-error"
                    }
                  ]
                },
                "max-resources": {
                  "allOf": [
                    {
                      "description": "Maximum number of resources used. See https://aka.ms/bicep/linter/max-resources"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-error"
                    }
                  ]
                },
                "max-variables": {
                  "allOf": [
                    {
                      "description": "Maximum number of variables used. See https://aka.ms/bicep/linter/max-variables"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-error"
                    }
                  ]
                },
                "no-conflicting-metadata": {
                  "allOf": [
                    {
                      "description": "Metadata properties whose value is set by a separate decorator should not be set via the '@metadata()' decorator. See https://aka.ms/bicep/linter/no-conflicting-metadata"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                },
                "no-deployments-resources": {
                  "allOf": [
                    {
                      "description": "Bicep modules are recommended instead of representing nested or linked deployments as a resource. See https://aka.ms/bicep/linter/no-deployments-resources"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                },
                "no-hardcoded-env-urls": {
                  "allOf": [
                    {
                      "description": "Environment URLs should not be hardcoded. Use the environment() function to ensure compatibility across clouds. See https://aka.ms/bicep/linter/no-hardcoded-env-urls",
                      "type": "object",
                      "properties": {
                        "disallowedhosts": {
                          "description": "Customize the list of hosts to disallow",
                          "type": "array",
                          "default": [
                            "api.loganalytics.io",
                            "azuredatalakeanalytics.net",
                            "azuredatalakestore.net",
                            "batch.core.windows.net",
                            "core.windows.net",
                            "database.windows.net",
                            "datalake.azure.net",
                            "gallery.azure.com",
                            "graph.windows.net",
                            "login.microsoftonline.com",
                            "management.azure.com",
                            "management.core.windows.net",
                            "region.asazure.windows.net",
                            "trafficmanager.net",
                            "vault.azure.net"
                          ],
                          "items": {
                            "$id": "#/analyzers/core/rules/no-hardcoded-env-urls/disallowedhosts/items",
                            "title": "Items",
                            "type": "string",
                            "default": "",
                            "minLength": 1
                          }
                        },
                        "excludedhosts": {
                          "description": "Customize the list of hosts to allow even if they contain an excluded host as a substring",
                          "type": "array",
                          "default": ["schema.management.azure.com"],
                          "items": {
                            "$id": "#/analyzers/core/rules/no-hardcoded-env-urls/excludedhosts/items",
                            "title": "Items",
                            "type": "string",
                            "default": "",
                            "minLength": 0
                          }
                        }
                      }
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                },
                "no-hardcoded-location": {
                  "allOf": [
                    {
                      "description": "A resource's location should not use a hard-coded string or variable value. It should use a parameter, an expression, or the string 'global'. See https://aka.ms/bicep/linter/no-hardcoded-location"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                },
                "no-loc-expr-outside-params": {
                  "allOf": [
                    {
                      "description": "Functions resourceGroup().location and deployment().location should only be used as the default value of a parameter. See https://aka.ms/bicep/linter/no-loc-expr-outside-params"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                },
                "nested-deployment-template-scoping": {
                  "allOf": [
                    {
                      "description": "Nested deployment resources cannot refer to top-level symbols from within the 'template' property when inner-scoped evaluation is used. See https://aka.ms/bicep/linter/nested-deployment-template-scoping"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-error"
                    }
                  ]
                },
                "no-unnecessary-dependson": {
                  "allOf": [
                    {
                      "description": "No unnecessary dependsOn. See https://aka.ms/bicep/linter/no-unnecessary-dependson"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                },
                "no-unused-existing-resources": {
                  "allOf": [
                    {
                      "description": "All existing resources must be used. See https://aka.ms/bicep/linter/no-unused-existing-resources"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                },
                "no-unused-params": {
                  "allOf": [
                    {
                      "description": "All parameters must be used. See https://aka.ms/bicep/linter/no-unused-params"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                },
                "no-unused-vars": {
                  "allOf": [
                    {
                      "description": "All variables must be used. See https://aka.ms/bicep/linter/no-unused-vars"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                },
                "outputs-should-not-contain-secrets": {
                  "allOf": [
                    {
                      "description": "Outputs should not contain secrets. See https://aka.ms/bicep/linter/outputs-should-not-contain-secrets"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                },
                "prefer-interpolation": {
                  "allOf": [
                    {
                      "description": "Use string interpolation instead of the concat function. See https://aka.ms/bicep/linter/prefer-interpolation"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                },
                "prefer-unquoted-property-names": {
                  "allOf": [
                    {
                      "description": "Property names that are valid identifiers should be declared without quotation marks and accessed using dot notation. See https://aka.ms/bicep/linter/prefer-unquoted-property-names"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                },
                "protect-commandtoexecute-secrets": {
                  "allOf": [
                    {
                      "description": "Use protectedSettings for commandToExecute secrets. See https://aka.ms/bicep/linter/protect-commandtoexecute-secrets"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                },
                "secure-params-in-nested-deploy": {
                  "allOf": [
                    {
                      "description": "Outer-scoped nested deployment resources should not be used for secure parameters or list* functions. See https://aka.ms/bicep/linter/secure-params-in-nested-deploy"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                },
                "secure-secrets-in-params": {
                  "allOf": [
                    {
                      "description": "Parameters that represent secrets must be secure. See https://aka.ms/bicep/linter/secure-secrets-in-params"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                },
                "secure-parameter-default": {
                  "allOf": [
                    {
                      "description": "Secure parameters should not have hardcoded defaults (except for empty or newGuid()). See https://aka.ms/bicep/linter/secure-parameter-default"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                },
                "simplify-interpolation": {
                  "allOf": [
                    {
                      "description": "Remove unnecessary string interpolation. See https://aka.ms/bicep/linter/simplify-interpolation"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                },
                "simplify-json-null": {
                  "allOf": [
                    {
                      "description": "Simplify json('null') to null. See https://aka.ms/bicep/linter/simplify-json-null"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                },
                "use-parent-property": {
                  "allOf": [
                    {
                      "description": "Use the parent property instead of formatting child resource names with '/' characters. See https://aka.ms/bicep/linter/use-parent-property"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                },
                "use-recent-api-versions": {
                  "allOf": [
                    {
                      "description": "Use recent API versions. See https://aka.ms/bicep/linter/use-recent-api-versions",
                      "type": "object",
                      "properties": {
                        "maxAgeInDays": {
                          "description": "Maximum age in days before an API version is considered old (default is 730 days = 2 years)",
                          "type": "integer",
                          "default": 730,
                          "minimum": 0
                        }
                      }
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-off"
                    }
                  ]
                },
                "use-resource-id-functions": {
                  "allOf": [
                    {
                      "description": "Properties representing a resource ID must be generated appropriately. See https://aka.ms/bicep/linter/use-resource-id-functions"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                },
                "use-resource-symbol-reference": {
                  "allOf": [
                    {
                      "description": "Use a direct resource symbol reference instead of 'reference' or 'list*' functions. See https://aka.ms/bicep/linter/use-resource-symbol-reference"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                },
                "use-stable-resource-identifiers": {
                  "allOf": [
                    {
                      "description": "Resource identifiers should be reproducible outside of their initial deployment context. See https://aka.ms/bicep/linter/use-stable-resource-identifiers"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                },
                "use-stable-vm-image": {
                  "allOf": [
                    {
                      "description": "Virtual machines shouldn't use preview images. See https://aka.ms/bicep/linter/use-stable-vm-image"
                    },
                    {
                      "$ref": "#/definitions/rule-def-level-warning"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "cacheRootDirectory": {
      "type": "string",
      "description": "The directory in which Bicep may cache templates downloaded from remote registries"
    },
    "experimentalFeaturesEnabled": {
      "type": "object",
      "description": "The experimental Bicep features that should be enabled or disabled for templates using this configuration file. See https://aka.ms/bicep/experimental-features for more information.",
      "properties": {
        "microsoftGraphPreview": {
          "type": "boolean"
        },
        "symbolicNameCodegen": {
          "type": "boolean",
          "description": "Allows the ARM template layer to use a new schema to represent resources as an object dictionary rather than an array of objects. See https://aka.ms/bicep/experimental-features#symbolicnamecodegen"
        },
        "extensibility": {
          "type": "boolean",
          "description": "Allows Bicep to use a provider model to deploy non-ARM resources. See https://aka.ms/bicep/experimental-features#extensibility"
        },
        "resourceTypedParamsAndOutputs": {
          "type": "boolean",
          "description": "Enables the type for a parameter or output to be of type resource to make it easier to pass resource references between modules. See https://aka.ms/bicep/experimental-features#resourcetypedparamsandoutputs"
        },
        "sourceMapping": {
          "type": "boolean",
          "description": "Enables basic source mapping to map an error location returned in the ARM template layer back to the relevant location in the Bicep file. See https://aka.ms/bicep/experimental-features#sourcemapping"
        },
        "legacyFormatter": {
          "type": "boolean",
          "description": "Enables code formatting using the legacy formatter. See https://aka.ms/bicep/experimental-features#legacyformatter"
        },
        "testFramework": {
          "type": "boolean",
          "description": "Allows you to author client-side, offline unit-test test blocks. Should be enabled in tandem with `assertions`. See https://aka.ms/bicep/experimental-features#testframework"
        },
        "assertions": {
          "type": "boolean",
          "description": "Allows you to author boolean assertions using the assert keyword. Should be enabled in tandem with 'testFramework'. See https://aka.ms/bicep/experimental-features#assertions"
        },
        "dynamicTypeLoading": {
          "description": "Enables dynamic type loading for resource type providers. See https://aka.ms/bicep/experimental-features#dynamictypeloading",
          "type": "boolean"
        },
        "providerRegistry": {
          "type": "boolean"
        },
        "publishSource": {
          "type": "boolean",
          "description": "Enables publishing source code with modules using the bicep publish `--with-source` option. See https://aka.ms/bicep/experimental-features#publishsource"
        },
        "optionalModuleNames": {
          "type": "boolean",
          "description": "Enabling this feature makes the name property in the body of module declarations optional. See https://aka.ms/bicep/experimental-features#optionalmodulenames"
        },
        "resourceDerivedTypes": {
          "type": "boolean",
          "description": "If enabled, templates can reuse resource types wherever a type is expected. See https://aka.ms/bicep/experimental-features#resourcederivedtypes"
        }
      },
      "additionalProperties": false
    },
    "formatting": {
      "type": "object",
      "description": "The Bicep format settings",
      "properties": {
        "indentKind": {
          "type": "string",
          "description": "The indentation kind",
          "enum": ["Space", "Tab"]
        },
        "newlineKind": {
          "type": "string",
          "description": "The newline kind",
          "enum": ["LF", "CRLF", "CR"]
        },
        "indentSize": {
          "type": "integer",
          "description": "The indentation size (applicable when \"indentKind\" is set to \"Space\")"
        },
        "width": {
          "type": "integer",
          "description": "The maximum number of characters that should appear on a line"
        },
        "insertFinalNewline": {
          "type": "boolean",
          "description": ""
        }
      }
    }
  }
}
