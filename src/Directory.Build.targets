<Project>

  <!--
    We need to use conditional compilation for some platform-specific code in certain cases. 
    The macros declared here represent the platform of the build machine that is compiling the code.
    You are wrong if you use these macros in code that compiles into a multi-platform binary.
    (If we ship one binary for all 3 platforms, there will only be one build machine platform and it won't match the 2 others.)
  -->
  <PropertyGroup Condition=" $(MSBuildProjectExtension) == '.csproj' ">
    <IsWindowsBuild Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)))' == 'true'">true</IsWindowsBuild> 
    <IsOSXBuild Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))' == 'true'">true</IsOSXBuild> 
    <IsLinuxBuild Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))' == 'true'">true</IsLinuxBuild>

    <DefineConstants Condition=" $(IsLinuxBuild) == 'true' ">$(DefineConstants);LINUX_BUILD</DefineConstants>
    <DefineConstants Condition=" $(IsOSXBuild) == 'true' ">$(DefineConstants);OSX_BUILD</DefineConstants>
    <DefineConstants Condition=" $(IsWindowsBuild) == 'true' ">$(DefineConstants);WINDOWS_BUILD</DefineConstants>
  </PropertyGroup>
  
  <ItemGroup>
    <AdditionalFiles Include="$(MSBuildThisFileDirectory)/BannedSymbols.txt" />
  </ItemGroup>

  <!-- Nuget Publishing related properties that are common to all packages -->
  <PropertyGroup Condition="'$(EnableNuget)' == 'true'" >
    <!-- <GenerateNuspecDependsOn>$(GenerateNuspecDependsOn);</GenerateNuspecDependsOn> -->
    <PackageOutputPath>$(MSBuildThisFileDirectory)\..\out</PackageOutputPath>
    <Authors>Microsoft</Authors>
    <Owners><!-- Don't set this field --></Owners>
    <PackageProjectUrl>https://github.com/Azure/bicep</PackageProjectUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageLicenseUrl><!-- Don't set this field (deprecated) --></PackageLicenseUrl>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <Copyright>Â© Microsoft Corporation. All rights reserved.</Copyright>
    <PackageTags>Azure;Bicep;$(PackageTags)</PackageTags>
    <PackageIconUrl><!-- Don't set this field (deprecated) --></PackageIconUrl>
    <PackageIcon>bicep-logo-256.png</PackageIcon>

    <!-- generate symbols for upload to the nuget feed -->
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>

    <!-- sourcelink configuration -->
    <RepositoryType>git</RepositoryType>
    <RepositoryUrl>https://github.com/Azure/bicep</RepositoryUrl>

    <IsPackable>true</IsPackable>
  </PropertyGroup>

  <ItemGroup Condition="'$(EnableNuget)' == 'true'">
    <None Include="$(MSBuildThisFileDirectory)\icons\bicep-logo-256.png" Pack="true" PackagePath="" Visible="false" />
  </ItemGroup>

  <ItemGroup>
    <!-- 
      projects that conditionally depend on this package must always reference it in order for the lock files to be predictable
      the package is harmless until the target it provides is executed via AfterTargets or BeforeTargets.
    -->
    <PackageReference Include="Azure.Deployments.Internal.GenerateNotice" Version="$(GenerateNoticePackageVersion)" PrivateAssets="All" Condition="'$(EnableNuget)' == 'true' or '$(EnableNoticeInPublishOutput)' == 'true' or '$(AddNoticeAsEmbeddedResource)' == 'true'" />
  </ItemGroup>
  <PropertyGroup>
    <!-- configure the preamble for the generated notice file - if file not generated, this is harmless -->
    <GenerateNoticePreambleFile>$(MSBuildThisFileDirectory)\build\notice-preamble.txt</GenerateNoticePreambleFile>
  </PropertyGroup>

  <!-- generates the notice file for NuGet packages built from csproj files (only in CI) -->
  <Import Project="$(MSBuildThisFileDirectory)\build\GenerateNoticeForCSharpNugetPackages.targets" Condition="'$(EnableNuget)' == 'true'" />

  <!-- generates the notice file in the /publish directory during dotnet publish (only in CI) -->
  <Import Project="$(MSBuildThisFileDirectory)\build\GenerateNoticeInPublishOutput.targets" Condition="'$(EnableNoticeInPublishOutput)' == 'true'" />

  <!-- generates the notice file and adds it as an embedded resource (only in CI) -->
  <Import Project="$(MSBuildThisFileDirectory)\build\AddNoticeAsEmbeddedResource.targets" Condition="'$(AddNoticeAsEmbeddedResource)' == 'true'" />

  <!-- adds the license file as an embedded resource (in all builds) -->
  <Import Project="$(MSBuildThisFileDirectory)\build\AddLicenseAsEmbeddedResource.targets" Condition="'$(AddLicenseAsEmbeddedResource)' == 'true'" />

  <!-- generates the notice file for Visual Studio VSIX (only in CI) -->
  <Import Project="$(MSBuildThisFileDirectory)\build\GenerateNoticeForVisualStudioVsix.targets" Condition="'$(EnableNoticeInVisualStudioVsix)' == 'true' " />
</Project>
