/* 
  Valid and invalid code is mixed together to validate recovery logic. It can even contain ** * *** **.
*/

parameter myString string
wrong

parameter myInt int
parameter

parameter myBool bool

parameter missingType

parameter myString2 string default 'string value'

parameter wrongDefaultValue string default 42

parameter myInt2 int default 42
parameter noValueAfterColon int default   

parameter myTruth bool default 'not a boolean'
parameter myFalsehood bool default 'false'

parameter wrongAssignmentToken string: 'hello'

parameter WhySoLongWhySoLongWhySoLongWhySoLongWhySoLongWhySoLongWhySoLongWhySoLongWhySoLongWhySoLongWhySoLongWhySoLongWhySoLongWhySoLongWhySoLongWhySoLongWhySoLongWhySoLongWhySoLongWhySoLongWhySoLongWhySoLongWhySoLongWhySoLongWhySoLongWhySoLongWhySoLongWhySoLongWhySoLong string default 'why not?'

// badly escaped string
parameter wrongType fluffyBunny default 'what's up doc?'

// invalid escape
parameter wrongType fluffyBunny default 'what\s up doc?'

// unterminated string 
parameter wrongType fluffyBunny default 'what\'s up doc?

parameter wrongType fluffyBunny default 'what\'s up doc?'

// modifier on an invalid type
parameter someArray arra {
  minLength: 3
  maxLength: 24
}

// duplicate modifier property
parameter duplicatedModifierProperty string {
  minLength: 3
  minLength: 24
}

// non-existent modifiers
parameter secureInt int {
  secure: true
  minLength: 3
  maxLength: 123
}

// wrong modifier value types
parameter wrongIntModifier int {
  defaultValue: true
  allowedValues: [
    'test'
    true
  ]
  minValue: {
  }
  maxValue: [
  ]
  metadata: 'wrong'
}

// wrong metadata schema
parameter wrongMetadataSchema string {
  metadata: {
    description: true
  }
}

// expression in modifier
parameter expressionInModifier string {
  defaultValue: 2 + 3
  maxLength: a + 2
  minLength: foo()
  allowedValues: [
    i
  ]
}

// unterminated multi-line comment
/*    