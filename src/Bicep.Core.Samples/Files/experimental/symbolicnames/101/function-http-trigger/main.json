{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "1.9-experimental",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
    "_generator": {
      "name": "bicep",
      "version": "dev",
      "templateHash": "9335090027480898711"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "appNameSuffix": {
      "type": "string",
      "defaultValue": "[uniqueString(resourceGroup().id)]"
    },
    "keyVaultSku": {
      "type": "string",
      "defaultValue": "Standard"
    }
  },
  "variables": {
    "functionAppName": "[format('fn-{0}', parameters('appNameSuffix'))]",
    "appServicePlanName": "FunctionPlan",
    "appInsightsName": "AppInsights",
    "storageAccountName": "[format('fnstor{0}', replace(parameters('appNameSuffix'), '-', ''))]",
    "functionNameComputed": "MyHttpTriggeredFunction",
    "functionRuntime": "dotnet",
    "keyVaultName": "[format('kv{0}', replace(parameters('appNameSuffix'), '-', ''))]",
    "functionAppKeySecretName": "FunctionAppHostKey"
  },
  "resources": {
    "storageAccount": {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    "appInsights": {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2018-05-01-preview",
      "name": "[variables('appInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    },
    "plan": {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2020-06-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "sku": {
        "name": "Y1"
      },
      "properties": {}
    },
    "functionApp": {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2020-06-01",
      "name": "[variables('functionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "properties": {
        "serverFarmId": "[resourceInfo('plan').id]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', resourceInfo('storageAccount').name, environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', resourceInfo('storageAccount').name, environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference('appInsights').InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[format('InstrumentationKey={0}', reference('appInsights').InstrumentationKey)]"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "[variables('functionRuntime')]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            }
          ]
        },
        "httpsOnly": true
      },
      "dependsOn": [
        "appInsights",
        "plan",
        "storageAccount"
      ]
    },
    "function": {
      "type": "Microsoft.Web/sites/functions",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', resourceInfo('functionApp').name, variables('functionNameComputed'))]",
      "properties": {
        "config": {
          "disabled": false,
          "bindings": [
            {
              "name": "req",
              "type": "httpTrigger",
              "direction": "in",
              "authLevel": "function",
              "methods": [
                "get"
              ]
            },
            {
              "name": "$return",
              "type": "http",
              "direction": "out"
            }
          ]
        },
        "files": {
          "run.csx": "#r \"Newtonsoft.Json\"\n\nusing System.Net;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Primitives;\nusing Newtonsoft.Json;\n\npublic static async Task<IActionResult> Run(HttpRequest req, ILogger log)\n{\n      log.LogInformation(\"C# HTTP trigger function processed a request.\");\n\n    string name = req.Query[\"name\"];\n\n    string requestBody = await new StreamReader(req.Body).ReadToEndAsync();\n    dynamic data = JsonConvert.DeserializeObject(requestBody);\n    name = name ?? data?.name;\n\n    string responseMessage = string.IsNullOrEmpty(name)\n        ? \"This HTTP triggered function executed successfully. Pass a name in the query string or in the request body for a personalized response.\"\n                : $\"Hello, {name}. This HTTP triggered function executed successfully.\";\n\n            return new OkObjectResult(responseMessage);\n}\n"
        }
      },
      "dependsOn": [
        "functionApp"
      ]
    },
    "keyVault": {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2019-09-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "family": "A",
          "name": "[parameters('keyVaultSku')]"
        },
        "accessPolicies": []
      }
    },
    "keyVaultSecret": {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2018-02-14",
      "name": "[format('{0}/{1}', resourceInfo('keyVault').name, variables('functionAppKeySecretName'))]",
      "properties": {
        "value": "[listKeys(format('{0}/host/default', resourceInfo('functionApp').id), resourceInfo('functionApp').apiVersion).functionKeys.default]"
      },
      "dependsOn": [
        "functionApp",
        "keyVault"
      ]
    }
  },
  "outputs": {
    "functionAppHostName": {
      "type": "string",
      "value": "[reference('functionApp').defaultHostName]"
    },
    "functionName": {
      "type": "string",
      "value": "[variables('functionNameComputed')]"
    }
  }
}