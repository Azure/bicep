{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "1.9-experimental",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
    "_generator": {
      "name": "bicep",
      "version": "dev",
      "templateHash": "15774430606770457809"
    }
  },
  "definitions": {
    "foo": {
      "type": "object",
      "required": [
        "stringProp",
        "objectProp",
        "typeRefProp",
        "literalProp"
      ],
      "properties": {
        "stringProp": {
          "type": "string",
          "metadata": {
            "description": "A string property"
          },
          "maxLength": 10,
          "minLength": 3
        },
        "objectProp": {
          "type": "object",
          "required": [
            "intProp"
          ],
          "properties": {
            "intProp": {
              "type": "int",
              "minValue": 1
            },
            "intArrayArrayProp": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "int"
                }
              }
            }
          }
        },
        "typeRefProp": {
          "$ref": "#/definitions/bar"
        },
        "literalProp": {
          "type": "string",
          "allowedValues": [
            "literal"
          ]
        },
        "recursion": {
          "$ref": "#/definitions/foo"
        }
      },
      "sealed": true,
      "metadata": {
        "description": "The foo type"
      }
    },
    "bar": {
      "type": "array",
      "items": {
        "type": "array",
        "items": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "int"
            }
          }
        }
      },
      "metadata": {
        "examples": [
          [
            [
              [
                [
                  1
                ]
              ]
            ],
            [
              [
                [
                  2
                ]
              ]
            ],
            [
              [
                [
                  3
                ]
              ]
            ]
          ]
        ],
        "description": "An array of array of arrays of arrays of ints"
      },
      "minLength": 3
    },
    "aUnion": {
      "type": "string",
      "allowedValues": [
        "crackle",
        "pop",
        "snap"
      ]
    },
    "expandedUnion": {
      "type": "string",
      "allowedValues": [
        "buzz",
        "crackle",
        "fizz",
        "pop",
        "snap"
      ]
    },
    "tupleUnion": {
      "type": "array",
      "allowedValues": [
        [
          "fizz",
          "buzz"
        ],
        [
          "foo",
          "bar",
          "baz"
        ],
        [
          "snap",
          "crackle",
          "pop"
        ]
      ]
    },
    "mixedArray": {
      "type": "array",
      "allowedValues": [
        "heffalump",
        "woozle",
        -10,
        10,
        false,
        null,
        true,
        {
          "shape": "*",
          "size": "*"
        }
      ]
    },
    "bool": {
      "type": "string"
    },
    "tuple": {
      "type": "array"
    }
  },
  "parameters": {
    "inlineObjectParam": {
      "type": "object",
      "required": [
        "foo",
        "bar",
        "baz"
      ],
      "properties": {
        "foo": {
          "type": "string"
        },
        "bar": {
          "type": "int",
          "allowedValues": [
            100,
            200,
            300,
            400,
            500
          ]
        },
        "baz": {
          "type": "bool"
        }
      },
      "defaultValue": {
        "foo": "foo",
        "bar": 300,
        "baz": false
      }
    },
    "unionParam": {
      "type": "object",
      "allowedValues": [
        {
          "property": "ping"
        },
        {
          "property": "pong"
        }
      ],
      "defaultValue": {
        "property": "pong"
      }
    },
    "paramUsingType": {
      "$ref": "#/definitions/mixedArray"
    }
  },
  "resources": {}
}