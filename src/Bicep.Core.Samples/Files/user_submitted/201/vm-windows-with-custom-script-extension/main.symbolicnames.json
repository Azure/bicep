{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "1.9-experimental",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
    "_generator": {
      "name": "bicep",
      "version": "dev",
      "templateHash": "5537579470070255671"
    }
  },
  "parameters": {
    "name": {
      "type": "string"
    },
    "suffix": {
      "type": "string"
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "publicIpDnsLabel": {
      "type": "string"
    },
    "virtualNetworkAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16"
    },
    "virtualNetworkSubnetPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/24"
    },
    "virtualMachineAdminUsername": {
      "type": "string"
    },
    "virtualMachineAdminPassword": {
      "type": "securestring"
    },
    "virtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_D8s_v3",
      "allowedValues": [
        "Standard_D2s_v3",
        "Standard_D4s_v3",
        "Standard_D8s_v3"
      ]
    },
    "virtualMachinePublisher": {
      "type": "string",
      "defaultValue": "MicrosoftWindowsDesktop",
      "allowedValues": [
        "MicrosoftVisualStudio",
        "MicrosoftWindowsDesktop"
      ]
    },
    "virtualMachineOffer": {
      "type": "string",
      "defaultValue": "Windows-10",
      "allowedValues": [
        "visualstudio2019latest",
        "Windows-10"
      ]
    },
    "virtualMachineSku": {
      "type": "string",
      "defaultValue": "20h1-pro-g2",
      "allowedValues": [
        "vs-2019-comm-latest-ws2019",
        "vs-2019-ent-latest-ws2019",
        "20h1-pro-g2",
        "20h1-ent-g2"
      ]
    },
    "virtualMachineExtensionCustomScriptUri": {
      "type": "string"
    }
  },
  "variables": {
    "metadata": {
      "longName": "[format('{{0}}-{0}-{1}', parameters('name'), if(equals(coalesce(parameters('suffix'), ''), ''), '', concat('-', parameters('suffix'))))]",
      "shortName": "[format('{{0}}{0}{1}', replace(parameters('name'), '-', ''), if(equals(coalesce(parameters('suffix'), ''), ''), '', parameters('suffix')))]"
    },
    "storageAccount": {
      "name": "[replace(variables('metadata').shortName, '{0}', 'st')]",
      "location": "[parameters('location')]"
    },
    "publicIp": {
      "name": "[replace(variables('metadata').longName, '{0}', 'pip')]",
      "location": "[parameters('location')]"
    },
    "networkSecurityGroup": {
      "name": "[replace(variables('metadata').longName, '{0}', 'nsg')]",
      "location": "[parameters('location')]",
      "securityRules": [
        {
          "name": "default-allow-3389",
          "properties": {
            "priority": 1000,
            "access": "Allow",
            "direction": "Inbound",
            "protocol": "TCP",
            "sourcePortRange": "*",
            "sourceAddressPrefix": "*",
            "destinationAddressPrefix": "*",
            "destinationPortRange": 3389
          }
        }
      ]
    },
    "subnetName": "default"
  },
  "resources": {
    "st": {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[variables('storageAccount').name]",
      "location": "[variables('storageAccount').location]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS"
      }
    },
    "pip": {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-06-01",
      "name": "[variables('publicIp').name]",
      "location": "[variables('publicIp').location]",
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[if(equals(coalesce(parameters('publicIpDnsLabel'), ''), ''), replace(variables('metadata').shortName, '{0}', 'vm'), parameters('publicIpDnsLabel'))]"
        }
      }
    },
    "nsg": {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-06-01",
      "name": "[variables('networkSecurityGroup').name]",
      "location": "[variables('networkSecurityGroup').location]",
      "properties": {
        "securityRules": "[variables('networkSecurityGroup').securityRules]"
      }
    },
    "vnet": {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-06-01",
      "name": "[createObject('name', replace(variables('metadata').longName, '{0}', 'vnet'), 'location', parameters('location'), 'addressPrefixes', createArray(parameters('virtualNetworkAddressPrefix')), 'subnets', createArray(createObject('name', variables('subnetName'), 'properties', createObject('addressPrefix', parameters('virtualNetworkSubnetPrefix'), 'networkSecurityGroup', createObject('id', resourceInfo('nsg').id))))).name]",
      "location": "[createObject('name', replace(variables('metadata').longName, '{0}', 'vnet'), 'location', parameters('location'), 'addressPrefixes', createArray(parameters('virtualNetworkAddressPrefix')), 'subnets', createArray(createObject('name', variables('subnetName'), 'properties', createObject('addressPrefix', parameters('virtualNetworkSubnetPrefix'), 'networkSecurityGroup', createObject('id', resourceInfo('nsg').id))))).location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": "[createObject('name', replace(variables('metadata').longName, '{0}', 'vnet'), 'location', parameters('location'), 'addressPrefixes', createArray(parameters('virtualNetworkAddressPrefix')), 'subnets', createArray(createObject('name', variables('subnetName'), 'properties', createObject('addressPrefix', parameters('virtualNetworkSubnetPrefix'), 'networkSecurityGroup', createObject('id', resourceInfo('nsg').id))))).addressPrefixes]"
        },
        "subnets": "[createObject('name', replace(variables('metadata').longName, '{0}', 'vnet'), 'location', parameters('location'), 'addressPrefixes', createArray(parameters('virtualNetworkAddressPrefix')), 'subnets', createArray(createObject('name', variables('subnetName'), 'properties', createObject('addressPrefix', parameters('virtualNetworkSubnetPrefix'), 'networkSecurityGroup', createObject('id', resourceInfo('nsg').id))))).subnets]"
      },
      "dependsOn": [
        "nsg"
      ]
    },
    "nic": {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-06-01",
      "name": "[createObject('name', replace(variables('metadata').longName, '{0}', 'nic'), 'location', parameters('location'), 'ipConfigurations', createArray(createObject('name', 'ipconfig1', 'properties', createObject('privateIPAllocationMethod', 'Dynamic', 'publicIPAddress', createObject('id', resourceInfo('pip').id), 'subnet', createObject('id', resourceId('Microsoft.Network/virtualNetworks/subnets', resourceInfo('vnet').name, variables('subnetName'))))))).name]",
      "location": "[createObject('name', replace(variables('metadata').longName, '{0}', 'nic'), 'location', parameters('location'), 'ipConfigurations', createArray(createObject('name', 'ipconfig1', 'properties', createObject('privateIPAllocationMethod', 'Dynamic', 'publicIPAddress', createObject('id', resourceInfo('pip').id), 'subnet', createObject('id', resourceId('Microsoft.Network/virtualNetworks/subnets', resourceInfo('vnet').name, variables('subnetName'))))))).location]",
      "properties": {
        "ipConfigurations": "[createObject('name', replace(variables('metadata').longName, '{0}', 'nic'), 'location', parameters('location'), 'ipConfigurations', createArray(createObject('name', 'ipconfig1', 'properties', createObject('privateIPAllocationMethod', 'Dynamic', 'publicIPAddress', createObject('id', resourceInfo('pip').id), 'subnet', createObject('id', resourceId('Microsoft.Network/virtualNetworks/subnets', resourceInfo('vnet').name, variables('subnetName'))))))).ipConfigurations]"
      },
      "dependsOn": [
        "pip",
        "vnet"
      ]
    },
    "vm": {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2020-06-01",
      "name": "[createObject('name', replace(variables('metadata').shortName, '{0}', 'vm'), 'location', parameters('location'), 'vmSize', parameters('virtualMachineSize'), 'vmComputerName', replace(variables('metadata').shortName, '{0}', 'vm'), 'vmAdminUsername', parameters('virtualMachineAdminUsername'), 'vmAdminPassword', parameters('virtualMachineAdminPassword'), 'vmImagePublisher', parameters('virtualMachinePublisher'), 'vmImageOffer', parameters('virtualMachineOffer'), 'vmImageSku', parameters('virtualMachineSku'), 'vmOSDiskName', replace(variables('metadata').longName, '{0}', 'osdisk'), 'vmDataDisks', createArray(), 'networkInterfaces', createArray(createObject('id', resourceInfo('nic').id))).name]",
      "location": "[createObject('name', replace(variables('metadata').shortName, '{0}', 'vm'), 'location', parameters('location'), 'vmSize', parameters('virtualMachineSize'), 'vmComputerName', replace(variables('metadata').shortName, '{0}', 'vm'), 'vmAdminUsername', parameters('virtualMachineAdminUsername'), 'vmAdminPassword', parameters('virtualMachineAdminPassword'), 'vmImagePublisher', parameters('virtualMachinePublisher'), 'vmImageOffer', parameters('virtualMachineOffer'), 'vmImageSku', parameters('virtualMachineSku'), 'vmOSDiskName', replace(variables('metadata').longName, '{0}', 'osdisk'), 'vmDataDisks', createArray(), 'networkInterfaces', createArray(createObject('id', resourceInfo('nic').id))).location]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[createObject('name', replace(variables('metadata').shortName, '{0}', 'vm'), 'location', parameters('location'), 'vmSize', parameters('virtualMachineSize'), 'vmComputerName', replace(variables('metadata').shortName, '{0}', 'vm'), 'vmAdminUsername', parameters('virtualMachineAdminUsername'), 'vmAdminPassword', parameters('virtualMachineAdminPassword'), 'vmImagePublisher', parameters('virtualMachinePublisher'), 'vmImageOffer', parameters('virtualMachineOffer'), 'vmImageSku', parameters('virtualMachineSku'), 'vmOSDiskName', replace(variables('metadata').longName, '{0}', 'osdisk'), 'vmDataDisks', createArray(), 'networkInterfaces', createArray(createObject('id', resourceInfo('nic').id))).vmSize]"
        },
        "osProfile": {
          "computerName": "[createObject('name', replace(variables('metadata').shortName, '{0}', 'vm'), 'location', parameters('location'), 'vmSize', parameters('virtualMachineSize'), 'vmComputerName', replace(variables('metadata').shortName, '{0}', 'vm'), 'vmAdminUsername', parameters('virtualMachineAdminUsername'), 'vmAdminPassword', parameters('virtualMachineAdminPassword'), 'vmImagePublisher', parameters('virtualMachinePublisher'), 'vmImageOffer', parameters('virtualMachineOffer'), 'vmImageSku', parameters('virtualMachineSku'), 'vmOSDiskName', replace(variables('metadata').longName, '{0}', 'osdisk'), 'vmDataDisks', createArray(), 'networkInterfaces', createArray(createObject('id', resourceInfo('nic').id))).vmComputerName]",
          "adminUsername": "[createObject('name', replace(variables('metadata').shortName, '{0}', 'vm'), 'location', parameters('location'), 'vmSize', parameters('virtualMachineSize'), 'vmComputerName', replace(variables('metadata').shortName, '{0}', 'vm'), 'vmAdminUsername', parameters('virtualMachineAdminUsername'), 'vmAdminPassword', parameters('virtualMachineAdminPassword'), 'vmImagePublisher', parameters('virtualMachinePublisher'), 'vmImageOffer', parameters('virtualMachineOffer'), 'vmImageSku', parameters('virtualMachineSku'), 'vmOSDiskName', replace(variables('metadata').longName, '{0}', 'osdisk'), 'vmDataDisks', createArray(), 'networkInterfaces', createArray(createObject('id', resourceInfo('nic').id))).vmAdminUsername]",
          "adminPassword": "[createObject('name', replace(variables('metadata').shortName, '{0}', 'vm'), 'location', parameters('location'), 'vmSize', parameters('virtualMachineSize'), 'vmComputerName', replace(variables('metadata').shortName, '{0}', 'vm'), 'vmAdminUsername', parameters('virtualMachineAdminUsername'), 'vmAdminPassword', parameters('virtualMachineAdminPassword'), 'vmImagePublisher', parameters('virtualMachinePublisher'), 'vmImageOffer', parameters('virtualMachineOffer'), 'vmImageSku', parameters('virtualMachineSku'), 'vmOSDiskName', replace(variables('metadata').longName, '{0}', 'osdisk'), 'vmDataDisks', createArray(), 'networkInterfaces', createArray(createObject('id', resourceInfo('nic').id))).vmAdminPassword]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[createObject('name', replace(variables('metadata').shortName, '{0}', 'vm'), 'location', parameters('location'), 'vmSize', parameters('virtualMachineSize'), 'vmComputerName', replace(variables('metadata').shortName, '{0}', 'vm'), 'vmAdminUsername', parameters('virtualMachineAdminUsername'), 'vmAdminPassword', parameters('virtualMachineAdminPassword'), 'vmImagePublisher', parameters('virtualMachinePublisher'), 'vmImageOffer', parameters('virtualMachineOffer'), 'vmImageSku', parameters('virtualMachineSku'), 'vmOSDiskName', replace(variables('metadata').longName, '{0}', 'osdisk'), 'vmDataDisks', createArray(), 'networkInterfaces', createArray(createObject('id', resourceInfo('nic').id))).vmImagePublisher]",
            "offer": "[createObject('name', replace(variables('metadata').shortName, '{0}', 'vm'), 'location', parameters('location'), 'vmSize', parameters('virtualMachineSize'), 'vmComputerName', replace(variables('metadata').shortName, '{0}', 'vm'), 'vmAdminUsername', parameters('virtualMachineAdminUsername'), 'vmAdminPassword', parameters('virtualMachineAdminPassword'), 'vmImagePublisher', parameters('virtualMachinePublisher'), 'vmImageOffer', parameters('virtualMachineOffer'), 'vmImageSku', parameters('virtualMachineSku'), 'vmOSDiskName', replace(variables('metadata').longName, '{0}', 'osdisk'), 'vmDataDisks', createArray(), 'networkInterfaces', createArray(createObject('id', resourceInfo('nic').id))).vmImageOffer]",
            "sku": "[createObject('name', replace(variables('metadata').shortName, '{0}', 'vm'), 'location', parameters('location'), 'vmSize', parameters('virtualMachineSize'), 'vmComputerName', replace(variables('metadata').shortName, '{0}', 'vm'), 'vmAdminUsername', parameters('virtualMachineAdminUsername'), 'vmAdminPassword', parameters('virtualMachineAdminPassword'), 'vmImagePublisher', parameters('virtualMachinePublisher'), 'vmImageOffer', parameters('virtualMachineOffer'), 'vmImageSku', parameters('virtualMachineSku'), 'vmOSDiskName', replace(variables('metadata').longName, '{0}', 'osdisk'), 'vmDataDisks', createArray(), 'networkInterfaces', createArray(createObject('id', resourceInfo('nic').id))).vmImageSku]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[createObject('name', replace(variables('metadata').shortName, '{0}', 'vm'), 'location', parameters('location'), 'vmSize', parameters('virtualMachineSize'), 'vmComputerName', replace(variables('metadata').shortName, '{0}', 'vm'), 'vmAdminUsername', parameters('virtualMachineAdminUsername'), 'vmAdminPassword', parameters('virtualMachineAdminPassword'), 'vmImagePublisher', parameters('virtualMachinePublisher'), 'vmImageOffer', parameters('virtualMachineOffer'), 'vmImageSku', parameters('virtualMachineSku'), 'vmOSDiskName', replace(variables('metadata').longName, '{0}', 'osdisk'), 'vmDataDisks', createArray(), 'networkInterfaces', createArray(createObject('id', resourceInfo('nic').id))).vmOSDiskName]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": "[createObject('name', replace(variables('metadata').shortName, '{0}', 'vm'), 'location', parameters('location'), 'vmSize', parameters('virtualMachineSize'), 'vmComputerName', replace(variables('metadata').shortName, '{0}', 'vm'), 'vmAdminUsername', parameters('virtualMachineAdminUsername'), 'vmAdminPassword', parameters('virtualMachineAdminPassword'), 'vmImagePublisher', parameters('virtualMachinePublisher'), 'vmImageOffer', parameters('virtualMachineOffer'), 'vmImageSku', parameters('virtualMachineSku'), 'vmOSDiskName', replace(variables('metadata').longName, '{0}', 'osdisk'), 'vmDataDisks', createArray(), 'networkInterfaces', createArray(createObject('id', resourceInfo('nic').id))).vmDataDisks]"
        },
        "networkProfile": {
          "networkInterfaces": "[createObject('name', replace(variables('metadata').shortName, '{0}', 'vm'), 'location', parameters('location'), 'vmSize', parameters('virtualMachineSize'), 'vmComputerName', replace(variables('metadata').shortName, '{0}', 'vm'), 'vmAdminUsername', parameters('virtualMachineAdminUsername'), 'vmAdminPassword', parameters('virtualMachineAdminPassword'), 'vmImagePublisher', parameters('virtualMachinePublisher'), 'vmImageOffer', parameters('virtualMachineOffer'), 'vmImageSku', parameters('virtualMachineSku'), 'vmOSDiskName', replace(variables('metadata').longName, '{0}', 'osdisk'), 'vmDataDisks', createArray(), 'networkInterfaces', createArray(createObject('id', resourceInfo('nic').id))).networkInterfaces]"
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[reference('st').primaryEndpoints.blob]"
          }
        }
      },
      "dependsOn": [
        "nic",
        "st"
      ]
    },
    "vmext": {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2020-06-01",
      "name": "[createObject('name', format('{0}/config-app', resourceInfo('vm').name), 'location', parameters('location'), 'fileUris', createArray(parameters('virtualMachineExtensionCustomScriptUri')), 'commandToExecute', format('powershell -ExecutionPolicy Unrestricted -File ./{0}', last(split(parameters('virtualMachineExtensionCustomScriptUri'), '/')))).name]",
      "location": "[createObject('name', format('{0}/config-app', resourceInfo('vm').name), 'location', parameters('location'), 'fileUris', createArray(parameters('virtualMachineExtensionCustomScriptUri')), 'commandToExecute', format('powershell -ExecutionPolicy Unrestricted -File ./{0}', last(split(parameters('virtualMachineExtensionCustomScriptUri'), '/')))).location]",
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.10",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": "[createObject('name', format('{0}/config-app', resourceInfo('vm').name), 'location', parameters('location'), 'fileUris', createArray(parameters('virtualMachineExtensionCustomScriptUri')), 'commandToExecute', format('powershell -ExecutionPolicy Unrestricted -File ./{0}', last(split(parameters('virtualMachineExtensionCustomScriptUri'), '/')))).fileUris]",
          "commandToExecute": "[createObject('name', format('{0}/config-app', resourceInfo('vm').name), 'location', parameters('location'), 'fileUris', createArray(parameters('virtualMachineExtensionCustomScriptUri')), 'commandToExecute', format('powershell -ExecutionPolicy Unrestricted -File ./{0}', last(split(parameters('virtualMachineExtensionCustomScriptUri'), '/')))).commandToExecute]"
        },
        "protectedSettings": {}
      },
      "dependsOn": [
        "vm"
      ]
    }
  }
}