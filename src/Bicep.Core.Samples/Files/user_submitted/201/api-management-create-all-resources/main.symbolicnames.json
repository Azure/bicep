{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "1.9-experimental",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
    "_generator": {
      "name": "bicep",
      "version": "dev",
      "templateHash": "554096486254860362"
    }
  },
  "parameters": {
    "publisherEmail": {
      "type": "string"
    },
    "publisherName": {
      "type": "string"
    },
    "sku": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Developer",
        "Standard",
        "Premium"
      ]
    },
    "skuCount": {
      "type": "int",
      "defaultValue": 1
    },
    "mutualAuthenticationCertificate": {
      "type": "secureString"
    },
    "certificatePassword": {
      "type": "string"
    },
    "eventHubNamespaceConnectionString": {
      "type": "string"
    },
    "googleClientSecret": {
      "type": "secureString"
    },
    "openIdConnectClientSecret": {
      "type": "secureString"
    },
    "tenantPolicy": {
      "type": "string"
    },
    "apiPolicy": {
      "type": "string"
    },
    "operationPolicy": {
      "type": "string"
    },
    "productPolicy": {
      "type": "string"
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    }
  },
  "variables": {
    "apiManagementServiceName": "[format('apiservice{0}', uniqueString(resourceGroup().id))]"
  },
  "resources": {
    "apiManagementService": {
      "type": "Microsoft.ApiManagement/service",
      "apiVersion": "2020-06-01-preview",
      "name": "[variables('apiManagementServiceName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('sku')]",
        "capacity": "[parameters('skuCount')]"
      },
      "properties": {
        "publisherName": "[parameters('publisherName')]",
        "publisherEmail": "[parameters('publisherEmail')]"
      }
    },
    "policy": {
      "type": "Microsoft.ApiManagement/service/policies",
      "apiVersion": "2020-06-01-preview",
      "name": "[format('{0}/policy', resourceInfo('apiManagementService').name)]",
      "properties": {
        "value": "[parameters('tenantPolicy')]"
      },
      "dependsOn": [
        "apiManagementService"
      ]
    },
    "petStoreApiExample": {
      "type": "Microsoft.ApiManagement/service/apis",
      "apiVersion": "2020-06-01-preview",
      "name": "[format('{0}/PetStoreSwaggerImportExample', resourceInfo('apiManagementService').name)]",
      "properties": {
        "format": "swagger-link-json",
        "value": "http://petstore.swagger.io/v2/swagger.json",
        "path": "examplepetstore"
      },
      "dependsOn": [
        "apiManagementService"
      ]
    },
    "exampleApi": {
      "type": "Microsoft.ApiManagement/service/apis",
      "apiVersion": "2020-06-01-preview",
      "name": "[format('{0}/exampleApi', resourceInfo('apiManagementService').name)]",
      "properties": {
        "displayName": "Example API Name",
        "description": "Description for example API",
        "serviceUrl": "https://example.net",
        "path": "exampleapipath",
        "protocols": [
          "https"
        ]
      },
      "dependsOn": [
        "apiManagementService"
      ]
    },
    "exampleApiOperationDelete": {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2020-06-01-preview",
      "name": "[format('{0}/exampleOperationsDELETE', resourceInfo('exampleApi').name)]",
      "properties": {
        "displayName": "DELETE resource",
        "method": "DELETE",
        "urlTemplate": "/resource",
        "description": "A demonstration of a DELETE call"
      },
      "dependsOn": [
        "exampleApi"
      ]
    },
    "exampleApiOperationGet": {
      "type": "Microsoft.ApiManagement/service/apis/operations",
      "apiVersion": "2020-06-01-preview",
      "name": "[format('{0}/exampleOperationsGET', resourceInfo('exampleApi').name)]",
      "properties": {
        "displayName": "GET resource",
        "method": "GET",
        "urlTemplate": "/resource",
        "description": "A demonstration of a GET call"
      },
      "dependsOn": [
        "exampleApi"
      ]
    },
    "exampleApiOperationGetPolicy": {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2020-06-01-preview",
      "name": "[format('{0}/policy', resourceInfo('exampleApiOperationGet').name)]",
      "properties": {
        "value": "[parameters('operationPolicy')]"
      },
      "dependsOn": [
        "exampleApiOperationGet"
      ]
    },
    "exampleApiWithPolicy": {
      "type": "Microsoft.ApiManagement/service/apis",
      "apiVersion": "2020-06-01-preview",
      "name": "[format('{0}/exampleApiWithPolicy', resourceInfo('apiManagementService').name)]",
      "properties": {
        "displayName": "Example API Name with policy",
        "description": "Description for example API with policy",
        "serviceUrl": "https://examplewithpolicy.net",
        "path": "exampleapipolicypath",
        "protocols": [
          "https"
        ]
      },
      "dependsOn": [
        "apiManagementService"
      ]
    },
    "exampleApiWithPolicyPolicy": {
      "type": "Microsoft.ApiManagement/service/apis/operations/policies",
      "apiVersion": "2020-06-01-preview",
      "name": "[format('{0}/policy', resourceInfo('exampleApiWithPolicy').name)]",
      "properties": {
        "value": "[parameters('apiPolicy')]"
      },
      "dependsOn": [
        "exampleApiWithPolicy"
      ]
    },
    "exampleProduct": {
      "type": "Microsoft.ApiManagement/service/products",
      "apiVersion": "2020-06-01-preview",
      "name": "[format('{0}/exampleProduct', resourceInfo('apiManagementService').name)]",
      "properties": {
        "displayName": "Example Product name",
        "description": "Description for example product",
        "terms": "Terms for example product",
        "subscriptionRequired": true,
        "approvalRequired": false,
        "subscriptionsLimit": 1,
        "state": "published"
      },
      "dependsOn": [
        "apiManagementService"
      ]
    },
    "exampleProductApi": {
      "type": "Microsoft.ApiManagement/service/apis",
      "apiVersion": "2020-06-01-preview",
      "name": "[format('{0}/exampleApi', resourceInfo('exampleProduct').name)]",
      "dependsOn": [
        "exampleProduct"
      ]
    },
    "exampleProductPolicy": {
      "type": "Microsoft.ApiManagement/service/products/policies",
      "apiVersion": "2020-06-01-preview",
      "name": "[format('{0}/policy', resourceInfo('exampleProduct').name)]",
      "properties": {
        "value": "[parameters('productPolicy')]"
      },
      "dependsOn": [
        "exampleProduct"
      ]
    },
    "exampleUser1": {
      "type": "Microsoft.ApiManagement/service/users",
      "apiVersion": "2020-06-01-preview",
      "name": "[format('{0}/exampleUser1', resourceInfo('apiManagementService').name)]",
      "properties": {
        "firstName": "ExampleFirstName1",
        "lastName": "ExampleLastName1",
        "email": "examplefirst1@example.com",
        "state": "active",
        "note": "note for example user 1"
      },
      "dependsOn": [
        "apiManagementService"
      ]
    },
    "exampleUser2": {
      "type": "Microsoft.ApiManagement/service/users",
      "apiVersion": "2020-06-01-preview",
      "name": "[format('{0}/exampleUser2', resourceInfo('apiManagementService').name)]",
      "properties": {
        "firstName": "ExampleFirstName2",
        "lastName": "ExampleLastName2",
        "email": "examplefirst2@example.com",
        "state": "active",
        "note": "note for example user 2"
      },
      "dependsOn": [
        "apiManagementService"
      ]
    },
    "exampleUser3": {
      "type": "Microsoft.ApiManagement/service/users",
      "apiVersion": "2020-06-01-preview",
      "name": "[format('{0}/exampleUser1', resourceInfo('apiManagementService').name)]",
      "properties": {
        "firstName": "ExampleFirstName3",
        "lastName": "ExampleLastName3",
        "email": "examplefirst3@example.com",
        "state": "active",
        "note": "note for example user 3"
      },
      "dependsOn": [
        "apiManagementService"
      ]
    },
    "exampleProperty": {
      "type": "Microsoft.ApiManagement/service/properties",
      "apiVersion": "2019-01-01",
      "name": "[format('{0}/exampleproperties', resourceInfo('apiManagementService').name)]",
      "properties": {
        "displayName": "propertyExampleName",
        "value": "propertyExampleValue",
        "tags": [
          "exampleTag"
        ]
      },
      "dependsOn": [
        "apiManagementService"
      ]
    },
    "subscription1": {
      "type": "Microsoft.ApiManagement/service/subscriptions",
      "apiVersion": "2017-03-01",
      "name": "[format('{0}/examplesubscription1', resourceInfo('apiManagementService').name)]",
      "properties": {
        "displayName": "examplesubscription1",
        "productId": "[resourceInfo('exampleProduct').id]",
        "userId": "[resourceInfo('exampleUser1').id]"
      },
      "dependsOn": [
        "apiManagementService",
        "exampleProduct",
        "exampleUser1"
      ]
    },
    "subscription2": {
      "type": "Microsoft.ApiManagement/service/subscriptions",
      "apiVersion": "2017-03-01",
      "name": "[format('{0}/examplesubscription2', resourceInfo('apiManagementService').name)]",
      "properties": {
        "displayName": "examplesubscription2",
        "productId": "[resourceInfo('exampleProduct').id]",
        "userId": "[resourceInfo('exampleUser3').id]"
      },
      "dependsOn": [
        "apiManagementService",
        "exampleProduct",
        "exampleUser3"
      ]
    },
    "certificate": {
      "type": "Microsoft.ApiManagement/service/certificates",
      "apiVersion": "2020-06-01-preview",
      "name": "[format('{0}/exampleCertificate', resourceInfo('apiManagementService').name)]",
      "properties": {
        "data": "[parameters('mutualAuthenticationCertificate')]",
        "password": "[parameters('certificatePassword')]"
      },
      "dependsOn": [
        "apiManagementService"
      ]
    },
    "exampleGroup": {
      "type": "Microsoft.ApiManagement/service/groups",
      "apiVersion": "2020-06-01-preview",
      "name": "[format('{0}/exampleGroup', resourceInfo('apiManagementService').name)]",
      "properties": {
        "displayName": "Example Group Name",
        "description": "Example group description"
      },
      "dependsOn": [
        "apiManagementService"
      ]
    },
    "openIdConnectProvider": {
      "type": "Microsoft.ApiManagement/service/openidConnectProviders",
      "apiVersion": "2020-06-01-preview",
      "name": "[format('{0}/exampleOpenIdConnectProvider', resourceInfo('apiManagementService').name)]",
      "properties": {
        "displayName": "exampleOpenIdConnectProviderName",
        "description": "Description for example OpenId Connect provider",
        "metadataEndpoint": "https://example-openIdConnect-url.net",
        "clientId": "exampleClientId",
        "clientSecret": "[parameters('openIdConnectClientSecret')]"
      },
      "dependsOn": [
        "apiManagementService"
      ]
    },
    "exampleLogger": {
      "type": "Microsoft.ApiManagement/service/loggers",
      "apiVersion": "2020-06-01-preview",
      "name": "[format('{0}/exampleLogger', resourceInfo('apiManagementService').name)]",
      "properties": {
        "loggerType": "azureEventHub",
        "description": "Description for example logger",
        "credentials": {
          "name": "exampleEventHubName",
          "eventHubNamespaceConnectionString": "[parameters('eventHubNamespaceConnectionString')]"
        }
      },
      "dependsOn": [
        "apiManagementService"
      ]
    },
    "identityProvider": {
      "type": "Microsoft.ApiManagement/service/identityProviders",
      "apiVersion": "2020-06-01-preview",
      "name": "[format('{0}/google', resourceInfo('apiManagementService').name)]",
      "properties": {
        "clientId": "googleClientId",
        "clientSecret": "[parameters('googleClientSecret')]"
      },
      "dependsOn": [
        "apiManagementService"
      ]
    }
  }
}