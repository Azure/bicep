{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "parameters": {
      "type": "bool",
      "defaultValue": true
    },
    "mod": {
      "type": "bool",
      "defaultValue": true
    },
    "equals": {
      "type": "bool",
      "defaultValue": true
    }
  },
  "functions": [],
  "variables": {
    "myInt": 42,
    "myStr": "str",
    "curliesWithNoInterp": "}{1}{",
    "interp1": "[format('abc{0}def', 123)]",
    "interp2": "[format('{0}def', 123)]",
    "interp3": "[format('abc{0}', 123)]",
    "interp4": "[format('abc{0}{1}jk$l{2}p$', 123, 456, 789)]",
    "doubleInterp": "[format('abc{0}_{1}', format('def{0}', 123), format('{0}{1}', 456, 789))]",
    "curliesInInterp": "[format('{{{0}{{0}}{1}}}', 123, true())]",
    "bracketInTheMiddle": "a[b]",
    "bracketAtBeginning": "[[test",
    "enclosingBrackets": "[[test]",
    "emptyJsonArray": "[[]",
    "interpolatedBrackets": "[format('[{0}]', variables('myInt'))]",
    "nestedBrackets": "[[test[]test2]",
    "nestedInterpolatedBrackets": "[format('[{0}]', variables('emptyJsonArray'))]",
    "bracketStringInExpression": "[concat('[', '''test''', ']')]",
    "myTruth": true,
    "myFalsehood": false,
    "myEmptyObj": {},
    "myEmptyArray": [],
    "myObj": {
      "a": "a",
      "b": -12,
      "c": true,
      "d": "[not(true())]",
      "list": [
        1,
        2,
        "[add(2, 1)]",
        {
          "test": "[or(and(greater(144, 33), true()), lessOrEquals(99, 199))]"
        },
        "[equals(toLower('a'), toLower('b'))]"
      ],
      "obj": {
        "nested": [
          "hello"
        ]
      }
    },
    "objWithInterp": {
      "[variables('myStr')]": 1,
      "[format('abc{0}def', variables('myStr'))]": 2,
      "[format('{0}abc{1}', variables('interp1'), variables('interp2'))]": "[format('{0}abc{1}', variables('interp1'), variables('interp2'))]"
    },
    "myArr": [
      "pirates",
      "say",
      "arr"
    ],
    "myArrWithObjects": [
      {
        "name": "one",
        "enable": true
      },
      {
        "name": "two",
        "enable": "[or(and(false(), false()), not(equals(toLower('two'), toLower('three'))))]"
      }
    ],
    "expressionIndexOnAny": "[createObject()[resourceGroup().location]]",
    "anyIndexOnAny": "[true()[false()]]",
    "deploymentName": "[deployment().name]",
    "templateLinkUri": "[deployment().properties.templateLink.uri]",
    "portalEndpoint": "[environment().portal]",
    "loginEndpoint": "[environment().authentication.loginEndpoint]",
    "firstLocation": "[environment().locations[0].displayName]",
    "namedPropertyIndexer": "[createObject('foo', 's').foo]",
    "intIndexer": "[createArray('s')[0]]",
    "functionOnIndexer1": "[concat(createArray('s')[0], 's')]",
    "functionOnIndexer2": "[concat(createArray()[0], 's')]",
    "functionOnIndexer3": "[concat(createArray()[0], 's')]",
    "singleQuote": "'",
    "myPropertyName": "[format('{0}foo{1}', variables('singleQuote'), variables('singleQuote'))]",
    "previousEmitLimit": [
      "[concat('s')]",
      4,
      {
        "a": {
          "b": "[base64('s')]",
          "c": "[concat(createArray(add(12, 3)), createArray(not(true()), 'hello'))]",
          "d": "[resourceGroup().location]",
          "e": "[concat(createArray(true()))]",
          "f": "[concat(createArray(equals('s', 12)))]"
        }
      }
    ],
    "previousEmitLimit2": [
      "[concat('s')]",
      4,
      {
        "a": {
          "b": "[base64('s')]",
          "c": "[union(createObject('a', add(12, 3)), createObject('b', not(true()), 'c', 'hello'))]",
          "d": "[resourceGroup().location]",
          "e": "[union(createObject('x', true()), createObject())]",
          "f": "[intersection(createObject('q', equals('s', 12)), createObject())]"
        }
      }
    ],
    "previousEmitLimit3": {
      "a": {
        "b": "[equals(createObject('a', resourceGroup().location), 2)]",
        "c": "[concat(createArray(), createArray(true()))]"
      }
    },
    "myVar": "hello",
    "myVar2": {
      "something": "[variables('myVar')]"
    },
    "myVar3": {
      "something": "[variables('myVar')]"
    },
    "myVar4": "[length(concat('s', 'a'))]",
    "variables": true,
    "if": true,
    "createArray": true,
    "createObject": true,
    "add": true,
    "sub": true,
    "mul": true,
    "div": true,
    "less": true,
    "lessOrEquals": true,
    "greater": true,
    "greaterOrEquals": true,
    "not": true,
    "and": true,
    "or": true,
    "I_WANT_IT_ALL": "[and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(variables('variables'), parameters('parameters')), variables('if')), variables('createArray')), variables('createObject')), variables('add')), variables('sub')), variables('mul')), variables('div')), parameters('mod')), variables('less')), variables('lessOrEquals')), variables('greater')), variables('greaterOrEquals')), parameters('equals')), variables('not')), variables('and')), variables('or'))]",
    "_": 3,
    "__": "[mul(10, variables('_'))]",
    "_0a_1b": true,
    "_1_": "[or(variables('_0a_1b'), equals(add(variables('__'), mod(variables('_'), 2)), 0))]",
    "resourceGroup": "something",
    "resourceGroupName": "[resourceGroup().name]",
    "resourceGroupObject": "[resourceGroup()]",
    "propertyAccessFromObject": "[variables('resourceGroupObject').name]",
    "isTrue": "[equals(max(1, 2), 3)]",
    "isFalse": "[not(variables('isTrue'))]",
    "someText": "[if(variables('isTrue'), concat('a', concat('b', 'c')), 'someText')]",
    "scopesWithoutArmRepresentation": {
      "tenant": "[createObject()]",
      "subscription": "[createObject()]",
      "resourceGroup": "[createObject()]"
    }
  },
  "resources": []
}