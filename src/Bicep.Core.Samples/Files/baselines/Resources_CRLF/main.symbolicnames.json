{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "dev",
      "templateHash": "5924434758202725836"
    }
  },
  "parameters": {
    "applicationName": {
      "type": "string",
      "defaultValue": "[format('to-do-app{0}', uniqueString(resourceGroup().id))]"
    },
    "appServicePlanTier": {
      "type": "string"
    },
    "appServicePlanInstances": {
      "type": "int"
    },
    "webSiteName": {
      "type": "string"
    },
    "cosmosDb": {
      "type": "object"
    },
    "shouldDeployVm": {
      "type": "bool",
      "defaultValue": true
    }
  },
  "variables": {
    "hostingPlanName": "[parameters('applicationName')]",
    "location": "[resourceGroup().location]",
    "cosmosDbResourceId": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDb').account)]",
    "_siteApiVersion": "2019-08-01",
    "_siteType": "Microsoft.Web/sites",
    "resourceCRef": {
      "id": "[resourceId('My.Rp/typeA/typeB', split(format('{0}/myName', 'resourceA'), '/')[0], split(format('{0}/myName', 'resourceA'), '/')[1])]"
    },
    "setResourceCRef": true,
    "myInterpKey": "abc",
    "storageAccounts": [
      {
        "name": "one",
        "location": "eastus2"
      },
      {
        "name": "two",
        "location": "westus"
      }
    ],
    "canHaveDuplicatesAcrossScopes": "hello",
    "duplicatesEverywhere": "hello",
    "dbs": [
      "db1",
      "db2",
      "db3"
    ],
    "sqlConfig": {
      "westus": {},
      "server-name": {}
    }
  },
  "resources": {
    "sqlServer::primaryDb::threatProtection": {
      "existing": true,
      "type": "Microsoft.Sql/servers/databases/advancedThreatProtectionSettings",
      "apiVersion": "2021-11-01",
      "name": "[format('{0}/{1}/{2}', 'sql-server-name', 'primary-db', 'default')]",
      "dependsOn": [
        "sqlServer::primaryDb"
      ]
    },
    "sqlServer::sqlDatabases": {
      "copy": {
        "name": "sqlDatabases",
        "count": "[length(variables('dbs'))]",
        "mode": "serial",
        "batchSize": 1
      },
      "type": "Microsoft.Sql/servers/databases",
      "apiVersion": "2021-11-01",
      "name": "[format('{0}/{1}', 'sql-server-name', variables('dbs')[copyIndex()])]",
      "location": "polandcentral",
      "dependsOn": [
        "sqlServer"
      ],
      "metadata": {
        "description": "Sql Databases"
      }
    },
    "sqlServer::primaryDb": {
      "type": "Microsoft.Sql/servers/databases",
      "apiVersion": "2021-11-01",
      "name": "[format('{0}/{1}', 'sql-server-name', 'primary-db')]",
      "location": "polandcentral",
      "dependsOn": [
        "sqlServer"
      ],
      "metadata": {
        "description": "Primary Sql Database"
      }
    },
    "basicStorage": {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "basicblobs",
      "location": "westus",
      "kind": "BlobStorage",
      "sku": {
        "name": "Standard_GRS"
      },
      "metadata": {
        "description": "this is basicStorage"
      }
    },
    "dnsZone": {
      "type": "Microsoft.Network/dnsZones",
      "apiVersion": "2018-05-01",
      "name": "myZone",
      "location": "global",
      "metadata": {
        "description": "this is dnsZone"
      }
    },
    "myStorageAccount": {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2017-10-01",
      "name": "myencryptedone",
      "location": "eastus2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "accessTier": "Hot",
        "encryption": {
          "keySource": "Microsoft.Storage",
          "services": {
            "blob": {
              "enabled": true
            },
            "file": {
              "enabled": true
            }
          }
        }
      },
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS"
      }
    },
    "withExpressions": {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2017-10-01",
      "name": "myencryptedone2",
      "location": "eastus2",
      "properties": {
        "supportsHttpsTrafficOnly": "[not(false())]",
        "accessTier": "[if(true(), 'Hot', 'Cold')]",
        "encryption": {
          "keySource": "Microsoft.Storage",
          "services": {
            "blob": {
              "enabled": "[or(true(), false())]"
            },
            "file": {
              "enabled": true
            }
          }
        }
      },
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS"
      },
      "dependsOn": [
        "myStorageAccount"
      ]
    },
    "farm": {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2019-08-01",
      "name": "[variables('hostingPlanName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "[parameters('appServicePlanTier')]",
        "capacity": "[parameters('appServicePlanInstances')]"
      },
      "properties": {
        "name": "[variables('hostingPlanName')]"
      }
    },
    "site": {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2019-08-01",
      "name": "[parameters('webSiteName')]",
      "location": "[variables('location')]",
      "properties": {
        "siteConfig": {
          "appSettings": [
            {
              "name": "CosmosDb:Account",
              "value": "[reference(variables('cosmosDbResourceId')).documentEndpoint]"
            },
            {
              "name": "CosmosDb:Key",
              "value": "[listKeys(variables('cosmosDbResourceId'), '2020-04-01').primaryMasterKey]"
            },
            {
              "name": "CosmosDb:DatabaseName",
              "value": "[parameters('cosmosDb').databaseName]"
            },
            {
              "name": "CosmosDb:ContainerName",
              "value": "[parameters('cosmosDb').containerName]"
            }
          ]
        }
      }
    },
    "nested": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "nestedTemplate1",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    "accessingReadOnlyProperties": {
      "type": "Microsoft.Foo/foos",
      "apiVersion": "2019-10-01",
      "name": "nestedTemplate1",
      "properties": {
        "otherId": "[resourceId('Microsoft.Resources/deployments', 'nestedTemplate1')]",
        "otherName": "nestedTemplate1",
        "otherVersion": "2019-10-01",
        "otherType": "Microsoft.Resources/deployments",
        "otherThings": "[reference('nested').mode]"
      },
      "dependsOn": [
        "nested"
      ]
    },
    "resourceA": {
      "type": "My.Rp/typeA",
      "apiVersion": "2020-01-01",
      "name": "resourceA"
    },
    "resourceB": {
      "type": "My.Rp/typeA/typeB",
      "apiVersion": "2020-01-01",
      "name": "[format('{0}/myName', 'resourceA')]",
      "dependsOn": [
        "resourceA"
      ]
    },
    "resourceC": {
      "type": "My.Rp/typeA/typeB",
      "apiVersion": "2020-01-01",
      "name": "[format('{0}/myName', 'resourceA')]",
      "properties": {
        "aId": "[resourceId('My.Rp/typeA', 'resourceA')]",
        "aType": "My.Rp/typeA",
        "aName": "resourceA",
        "aApiVersion": "2020-01-01",
        "bProperties": "[reference('resourceB')]"
      },
      "dependsOn": [
        "resourceA",
        "resourceB"
      ]
    },
    "resourceD": {
      "type": "My.Rp/typeD",
      "apiVersion": "2020-01-01",
      "name": "constant",
      "properties": {
        "runtime": [
          {
            "bId": "[resourceId('My.Rp/typeA/typeB', split(format('{0}/myName', 'resourceA'), '/')[0], split(format('{0}/myName', 'resourceA'), '/')[1])]",
            "bType": "My.Rp/typeA/typeB",
            "bName": "[format('{0}/myName', 'resourceA')]",
            "bApiVersion": "2020-01-01",
            "aKind": "[reference('resourceA', '2020-01-01', 'full').kind]"
          }
        ],
        "repro316": "[if(variables('setResourceCRef'), variables('resourceCRef'), null())]"
      },
      "dependsOn": [
        "resourceA",
        "resourceB",
        "resourceC"
      ]
    },
    "resourceWithInterp": {
      "type": "My.Rp/interp",
      "apiVersion": "2020-01-01",
      "name": "interpTest",
      "properties": {
        "[format('{0}', variables('myInterpKey'))]": 1,
        "[format('abc{0}def', variables('myInterpKey'))]": 2,
        "[format('{0}abc{1}', variables('myInterpKey'), variables('myInterpKey'))]": 3
      }
    },
    "resourceWithEscaping": {
      "type": "My.Rp/mockResource",
      "apiVersion": "2020-01-01",
      "name": "test",
      "properties": {
        "[[resourceGroup().location]": "[[resourceGroup().location]"
      }
    },
    "vmWithCondition": {
      "condition": "[parameters('shouldDeployVm')]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2020-06-01",
      "name": "vmName",
      "location": "westus",
      "properties": {
        "osProfile": {
          "windowsConfiguration": {
            "enableAutomaticUpdates": true
          }
        }
      },
      "metadata": {
        "description": "this is vmWithCondition"
      }
    },
    "vmWithCondition2": {
      "condition": "[parameters('shouldDeployVm')]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2020-06-01",
      "name": "vmName2",
      "location": "westus",
      "properties": {
        "osProfile": {
          "windowsConfiguration": {
            "enableAutomaticUpdates": true
          }
        }
      },
      "metadata": {
        "description": "this is another vmWithCondition"
      }
    },
    "extension1": {
      "type": "My.Rp/extensionResource",
      "apiVersion": "2020-12-01",
      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', 'vmName')]",
      "name": "extension",
      "dependsOn": [
        "vmWithCondition"
      ]
    },
    "extension2": {
      "type": "My.Rp/extensionResource",
      "apiVersion": "2020-12-01",
      "scope": "[extensionResourceId(format('Microsoft.Compute/virtualMachines/{0}', 'vmName'), 'My.Rp/extensionResource', 'extension')]",
      "name": "extension",
      "dependsOn": [
        "extension1"
      ]
    },
    "extensionDependencies": {
      "type": "My.Rp/mockResource",
      "apiVersion": "2020-01-01",
      "name": "extensionDependencies",
      "properties": {
        "res1": "[resourceId('Microsoft.Compute/virtualMachines', 'vmName')]",
        "res1runtime": "[reference('vmWithCondition').something]",
        "res2": "[extensionResourceId(resourceId('Microsoft.Compute/virtualMachines', 'vmName'), 'My.Rp/extensionResource', 'extension')]",
        "res2runtime": "[reference('extension1').something]",
        "res3": "[extensionResourceId(extensionResourceId(resourceId('Microsoft.Compute/virtualMachines', 'vmName'), 'My.Rp/extensionResource', 'extension'), 'My.Rp/extensionResource', 'extension')]",
        "res3runtime": "[reference('extension2').something]"
      },
      "dependsOn": [
        "extension1",
        "extension2",
        "vmWithCondition"
      ]
    },
    "existing1": {
      "existing": true,
      "type": "Mock.Rp/existingExtensionResource",
      "apiVersion": "2020-01-01",
      "scope": "[extensionResourceId(format('Microsoft.Compute/virtualMachines/{0}', 'vmName'), 'My.Rp/extensionResource', 'extension')]",
      "name": "existing1",
      "dependsOn": [
        "extension1"
      ],
      "metadata": {
        "description": "this is existing1"
      }
    },
    "existing2": {
      "existing": true,
      "type": "Mock.Rp/existingExtensionResource",
      "apiVersion": "2020-01-01",
      "scope": "[extensionResourceId(extensionResourceId(format('Microsoft.Compute/virtualMachines/{0}', 'vmName'), 'My.Rp/extensionResource', 'extension'), 'Mock.Rp/existingExtensionResource', 'existing1')]",
      "name": "existing2",
      "dependsOn": [
        "extension1"
      ]
    },
    "extension3": {
      "type": "My.Rp/extensionResource",
      "apiVersion": "2020-12-01",
      "scope": "[extensionResourceId(extensionResourceId(format('Microsoft.Compute/virtualMachines/{0}', 'vmName'), 'My.Rp/extensionResource', 'extension'), 'Mock.Rp/existingExtensionResource', 'existing1')]",
      "name": "extension3",
      "dependsOn": [
        "extension1"
      ]
    },
    "storageResources": {
      "copy": {
        "name": "storageResources",
        "count": "[length(variables('storageAccounts'))]"
      },
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[variables('storageAccounts')[copyIndex()].name]",
      "location": "[variables('storageAccounts')[copyIndex()].location]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "metadata": {
        "description": "this is just a storage account loop"
      }
    },
    "storageResourcesWithIndex": {
      "copy": {
        "name": "storageResourcesWithIndex",
        "count": "[length(variables('storageAccounts'))]"
      },
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[format('{0}{1}', variables('storageAccounts')[copyIndex()].name, copyIndex())]",
      "location": "[variables('storageAccounts')[copyIndex()].location]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "metadata": {
        "description": "this is just a storage account loop with index"
      }
    },
    "vnet": {
      "copy": {
        "name": "vnet",
        "count": "[length(range(0, 3))]"
      },
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-06-01",
      "name": "[format('vnet-{0}', range(0, 3)[copyIndex()])]",
      "properties": {
        "copy": [
          {
            "name": "subnets",
            "count": "[length(range(0, 4))]",
            "input": {
              "name": "[format('subnet-{0}-{1}', range(0, 3)[copyIndex()], range(0, 4)[copyIndex('subnets')])]"
            }
          }
        ]
      },
      "metadata": {
        "description": "this is just a basic nested loop"
      }
    },
    "duplicateIdentifiersWithinLoop": {
      "copy": {
        "name": "duplicateIdentifiersWithinLoop",
        "count": "[length(range(0, 3))]"
      },
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-06-01",
      "name": "[format('vnet-{0}', range(0, 3)[copyIndex()])]",
      "properties": {
        "copy": [
          {
            "name": "subnets",
            "count": "[length(range(0, 4))]",
            "input": {
              "name": "[format('subnet-{0}-{1}', range(0, 4)[copyIndex('subnets')], range(0, 4)[copyIndex('subnets')])]"
            }
          }
        ]
      }
    },
    "duplicateInGlobalAndOneLoop": {
      "copy": {
        "name": "duplicateInGlobalAndOneLoop",
        "count": "[length(range(0, 3))]"
      },
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-06-01",
      "name": "[format('vnet-{0}', range(0, 3)[copyIndex()])]",
      "properties": {
        "copy": [
          {
            "name": "subnets",
            "count": "[length(range(0, 4))]",
            "input": {
              "name": "[format('subnet-{0}-{1}', range(0, 4)[copyIndex('subnets')], range(0, 4)[copyIndex('subnets')])]"
            }
          }
        ]
      }
    },
    "duplicateInGlobalAndTwoLoops": {
      "copy": {
        "name": "duplicateInGlobalAndTwoLoops",
        "count": "[length(range(0, 3))]"
      },
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-06-01",
      "name": "[format('vnet-{0}', range(0, 3)[copyIndex()])]",
      "properties": {
        "copy": [
          {
            "name": "subnets",
            "count": "[length(range(0, 4))]",
            "input": {
              "name": "[format('subnet-{0}', range(0, 4)[copyIndex('subnets')])]"
            }
          }
        ]
      }
    },
    "dnsZones": {
      "copy": {
        "name": "dnsZones",
        "count": "[length(range(0, 4))]"
      },
      "type": "Microsoft.Network/dnsZones",
      "apiVersion": "2018-05-01",
      "name": "[format('zone{0}', range(0, 4)[copyIndex()])]",
      "location": "global"
    },
    "locksOnZones": {
      "copy": {
        "name": "locksOnZones",
        "count": "[length(range(0, 2))]"
      },
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2016-09-01",
      "scope": "[format('Microsoft.Network/dnsZones/{0}', format('zone{0}', range(0, 4)[range(0, 2)[copyIndex()]]))]",
      "name": "[format('lock{0}', range(0, 2)[copyIndex()])]",
      "properties": {
        "level": "CanNotDelete"
      },
      "dependsOn": [
        "[format('dnsZones[{0}]', range(0, 2)[copyIndex()])]"
      ]
    },
    "moreLocksOnZones": {
      "copy": {
        "name": "moreLocksOnZones",
        "count": "[length(range(0, 3))]"
      },
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2016-09-01",
      "scope": "[format('Microsoft.Network/dnsZones/{0}', format('zone{0}', range(0, 4)[copyIndex()]))]",
      "name": "[format('another{0}', copyIndex())]",
      "properties": {
        "level": "ReadOnly"
      },
      "dependsOn": [
        "[format('dnsZones[{0}]', copyIndex())]"
      ]
    },
    "singleLockOnFirstZone": {
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2016-09-01",
      "scope": "[format('Microsoft.Network/dnsZones/{0}', format('zone{0}', range(0, 4)[0]))]",
      "name": "single-lock",
      "properties": {
        "level": "ReadOnly"
      },
      "dependsOn": [
        "[format('dnsZones[{0}]', 0)]"
      ]
    },
    "p1_vnet": {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-06-01",
      "name": "myVnet",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/20"
          ]
        }
      }
    },
    "p1_subnet1": {
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', 'myVnet', 'subnet1')]",
      "properties": {
        "addressPrefix": "10.0.0.0/24"
      },
      "dependsOn": [
        "p1_vnet"
      ]
    },
    "p1_subnet2": {
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', 'myVnet', 'subnet2')]",
      "properties": {
        "addressPrefix": "10.0.1.0/24"
      },
      "dependsOn": [
        "p1_vnet"
      ]
    },
    "p2_res1": {
      "type": "Microsoft.Rp1/resource1",
      "apiVersion": "2020-06-01",
      "name": "res1"
    },
    "p2_res1child": {
      "type": "Microsoft.Rp1/resource1/child1",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', 'res1', 'child1')]",
      "dependsOn": [
        "p2_res1"
      ]
    },
    "p2_res2": {
      "type": "Microsoft.Rp2/resource2",
      "apiVersion": "2020-06-01",
      "scope": "[format('Microsoft.Rp1/resource1/{0}/child1/{1}', 'res1', 'child1')]",
      "name": "res2",
      "dependsOn": [
        "p2_res1child"
      ]
    },
    "p2_res2child": {
      "type": "Microsoft.Rp2/resource2/child2",
      "apiVersion": "2020-06-01",
      "scope": "[format('Microsoft.Rp1/resource1/{0}/child1/{1}', 'res1', 'child1')]",
      "name": "[format('{0}/{1}', 'res2', 'child2')]",
      "dependsOn": [
        "p2_res2"
      ]
    },
    "p3_res1": {
      "existing": true,
      "type": "Microsoft.Rp1/resource1",
      "apiVersion": "2020-06-01",
      "name": "res1"
    },
    "p3_child1": {
      "type": "Microsoft.Rp1/resource1/child1",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', 'res1', 'child1')]"
    },
    "p4_res1": {
      "existing": true,
      "type": "Microsoft.Rp1/resource1",
      "apiVersion": "2020-06-01",
      "scope": "/",
      "name": "res1"
    },
    "p4_child1": {
      "existing": true,
      "type": "Microsoft.Rp1/resource1/child1",
      "apiVersion": "2020-06-01",
      "scope": "/",
      "name": "[format('{0}/{1}', 'res1', 'child1')]"
    },
    "sqlServer": {
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2021-11-01",
      "name": "sql-server-name",
      "location": "polandcentral"
    },
    "sqlServerWithNameof": {
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2021-11-01",
      "name": "[format('sql-server-nameof-{0}', 'server-name')]",
      "location": "westus"
    }
  },
  "outputs": {
    "siteApiVersion": {
      "type": "string",
      "value": "2019-08-01"
    },
    "siteType": {
      "type": "string",
      "value": "Microsoft.Web/sites"
    },
    "p1_subnet1prefix": {
      "type": "string",
      "value": "[reference('p1_subnet1').addressPrefix]"
    },
    "p1_subnet1name": {
      "type": "string",
      "value": "subnet1"
    },
    "p1_subnet1type": {
      "type": "string",
      "value": "Microsoft.Network/virtualNetworks/subnets"
    },
    "p1_subnet1id": {
      "type": "string",
      "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', 'myVnet', 'subnet1')]"
    },
    "p2_res2childprop": {
      "type": "string",
      "value": "[reference('p2_res2child').someProp]"
    },
    "p2_res2childname": {
      "type": "string",
      "value": "child2"
    },
    "p2_res2childtype": {
      "type": "string",
      "value": "Microsoft.Rp2/resource2/child2"
    },
    "p2_res2childid": {
      "type": "string",
      "value": "[extensionResourceId(resourceId('Microsoft.Rp1/resource1/child1', 'res1', 'child1'), 'Microsoft.Rp2/resource2/child2', 'res2', 'child2')]"
    },
    "p3_res1childprop": {
      "type": "string",
      "value": "[reference('p3_child1').someProp]"
    },
    "p3_res1childname": {
      "type": "string",
      "value": "child1"
    },
    "p3_res1childtype": {
      "type": "string",
      "value": "Microsoft.Rp1/resource1/child1"
    },
    "p3_res1childid": {
      "type": "string",
      "value": "[resourceId('Microsoft.Rp1/resource1/child1', 'res1', 'child1')]"
    },
    "p4_res1childprop": {
      "type": "string",
      "value": "[reference('p4_child1').someProp]"
    },
    "p4_res1childname": {
      "type": "string",
      "value": "child1"
    },
    "p4_res1childtype": {
      "type": "string",
      "value": "Microsoft.Rp1/resource1/child1"
    },
    "p4_res1childid": {
      "type": "string",
      "value": "[tenantResourceId('Microsoft.Rp1/resource1/child1', 'res1', 'child1')]"
    },
    "nameof_sqlServer": {
      "type": "string",
      "value": "sqlServer"
    },
    "nameof_location": {
      "type": "string",
      "value": "location"
    },
    "nameof_minCapacity": {
      "type": "string",
      "value": "minCapacity"
    },
    "nameof_creationTime": {
      "type": "string",
      "value": "creationTime"
    },
    "nameof_id": {
      "type": "string",
      "value": "id"
    }
  }
}