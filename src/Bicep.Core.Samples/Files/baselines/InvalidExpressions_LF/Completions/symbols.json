[
  {
    "label": "add",
    "kind": "variable",
    "detail": "add",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_add",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "add"
    }
  },
  {
    "label": "and",
    "kind": "variable",
    "detail": "and",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_and",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "and"
    }
  },
  {
    "label": "any",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nany(value: any): any\n\n```  \nConverts the specified value to the `any` type.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_any",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "any($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "array",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\narray(valueToConvert: any): array\n\n```  \nConverts the value to an array.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_array",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "array($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "az",
    "kind": "folder",
    "detail": "az",
    "deprecated": false,
    "preselect": false,
    "sortText": "3_az",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "az."
    },
    "command": {
      "title": "symbol completion",
      "command": "editor.action.triggerSuggest"
    }
  },
  {
    "label": "azFunctions",
    "kind": "variable",
    "detail": "azFunctions",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_azFunctions",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "azFunctions"
    }
  },
  {
    "label": "bad",
    "kind": "variable",
    "detail": "bad",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_bad",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "bad"
    }
  },
  {
    "label": "badArrayIndexer",
    "kind": "variable",
    "detail": "badArrayIndexer",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_badArrayIndexer",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "badArrayIndexer"
    }
  },
  {
    "label": "badExpressionInPropertyAccess",
    "kind": "variable",
    "detail": "badExpressionInPropertyAccess",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_badExpressionInPropertyAccess",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "badExpressionInPropertyAccess"
    }
  },
  {
    "label": "badExpressionIndexer",
    "kind": "variable",
    "detail": "badExpressionIndexer",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_badExpressionIndexer",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "badExpressionIndexer"
    }
  },
  {
    "label": "badIndexOverArray",
    "kind": "variable",
    "detail": "badIndexOverArray",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_badIndexOverArray",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "badIndexOverArray"
    }
  },
  {
    "label": "badIndexOverArray2",
    "kind": "variable",
    "detail": "badIndexOverArray2",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_badIndexOverArray2",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "badIndexOverArray2"
    }
  },
  {
    "label": "badIndexOverObj",
    "kind": "variable",
    "detail": "badIndexOverObj",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_badIndexOverObj",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "badIndexOverObj"
    }
  },
  {
    "label": "badIndexOverObj2",
    "kind": "variable",
    "detail": "badIndexOverObj2",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_badIndexOverObj2",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "badIndexOverObj2"
    }
  },
  {
    "label": "badIndexer",
    "kind": "variable",
    "detail": "badIndexer",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_badIndexer",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "badIndexer"
    }
  },
  {
    "label": "badInnerArray",
    "kind": "variable",
    "detail": "badInnerArray",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_badInnerArray",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "badInnerArray"
    }
  },
  {
    "label": "badInnerArrayIndexer",
    "kind": "variable",
    "detail": "badInnerArrayIndexer",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_badInnerArrayIndexer",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "badInnerArrayIndexer"
    }
  },
  {
    "label": "badInnerProperty",
    "kind": "variable",
    "detail": "badInnerProperty",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_badInnerProperty",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "badInnerProperty"
    }
  },
  {
    "label": "badInnerType",
    "kind": "variable",
    "detail": "badInnerType",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_badInnerType",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "badInnerType"
    }
  },
  {
    "label": "badProperty",
    "kind": "variable",
    "detail": "badProperty",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_badProperty",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "badProperty"
    }
  },
  {
    "label": "badPropertyIndexer",
    "kind": "variable",
    "detail": "badPropertyIndexer",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_badPropertyIndexer",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "badPropertyIndexer"
    }
  },
  {
    "label": "badSpelling",
    "kind": "variable",
    "detail": "badSpelling",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_badSpelling",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "badSpelling"
    }
  },
  {
    "label": "badType",
    "kind": "variable",
    "detail": "badType",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_badType",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "badType"
    }
  },
  {
    "label": "bannedFunctions",
    "kind": "variable",
    "detail": "bannedFunctions",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_bannedFunctions",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "bannedFunctions"
    }
  },
  {
    "label": "base64",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nbase64(inputString: string): string\n\n```  \nReturns the base64 representation of the input string.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_base64",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "base64($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "base64ToJson",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nbase64ToJson(base64Value: string): any\n\n```  \nConverts a base64 representation to a JSON object.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_base64ToJson",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "base64ToJson($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "base64ToString",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nbase64ToString(base64Value: string): string\n\n```  \nConverts a base64 representation to a string.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_base64ToString",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "base64ToString($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "bool",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nbool(value: any): bool\n\n```  \nConverts the parameter to a boolean.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_bool",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "bool($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "cidrHost",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\ncidrHost(network: string, hostIndex: int): string\n\n```  \nCalculates the usable IP address of the host with the specified index on the specified IP address range in CIDR notation.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_cidrHost",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "cidrHost($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "cidrSubnet",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\ncidrSubnet(network: string, cidr: int, subnetIndex: int): string\n\n```  \nSplits the specified IP address range in CIDR notation into subnets with a new CIDR value and returns the IP address range of the subnet with the specified index.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_cidrSubnet",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "cidrSubnet($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "complex",
    "kind": "variable",
    "detail": "complex",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_complex",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "complex"
    }
  },
  {
    "label": "concat",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nconcat(... : array): array\nconcat(... : bool | int | string): string\n\n```  \nCombines multiple arrays and returns the concatenated array, or combines multiple string values and returns the concatenated string.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_concat",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "concat($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "concatNotEnough",
    "kind": "variable",
    "detail": "concatNotEnough",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_concatNotEnough",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "concatNotEnough"
    }
  },
  {
    "label": "concatWrongTypes",
    "kind": "variable",
    "detail": "concatWrongTypes",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_concatWrongTypes",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "concatWrongTypes"
    }
  },
  {
    "label": "concatWrongTypesContradiction",
    "kind": "variable",
    "detail": "concatWrongTypesContradiction",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_concatWrongTypesContradiction",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "concatWrongTypesContradiction"
    }
  },
  {
    "label": "contains",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\ncontains(object: object, propertyName: string): bool\ncontains(array: array, itemToFind: any): bool\ncontains(string: string, itemToFind: string): bool\n\n```  \nChecks whether an array contains a value, an object contains a key, or a string contains a substring. The string comparison is case-sensitive. However, when testing if an object contains a key, the comparison is case-insensitive.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_contains",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "contains($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "dataUri",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\ndataUri(valueToConvert: any): string\n\n```  \nConverts a value to a data URI.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_dataUri",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "dataUri($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "dataUriToString",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\ndataUriToString(dataUriToConvert: string): string\n\n```  \nConverts a data URI formatted value to a string.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_dataUriToString",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "dataUriToString($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "dateTimeAdd",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\ndateTimeAdd(base: string, duration: string, [format: string]): string\n\n```  \nAdds a time duration to a base value. ISO 8601 format is expected.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_dateTimeAdd",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "dateTimeAdd($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "dateTimeFromEpoch",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\ndateTimeFromEpoch([epochTime: int]): string\n\n```  \nConverts an epoch time integer value to an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) dateTime string.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_dateTimeFromEpoch",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "dateTimeFromEpoch($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "dateTimeToEpoch",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\ndateTimeToEpoch([dateTime: string]): int\n\n```  \nConverts an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) dateTime string to an epoch time integer value.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_dateTimeToEpoch",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "dateTimeToEpoch($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "deployment",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\ndeployment(): deployment\n\n```  \nReturns information about the current deployment operation.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_deployment",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "deployment()$0"
    }
  },
  {
    "label": "div",
    "kind": "variable",
    "detail": "div",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_div",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "div"
    }
  },
  {
    "label": "dotAccessOnNonObject",
    "kind": "variable",
    "detail": "dotAccessOnNonObject",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_dotAccessOnNonObject",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "dotAccessOnNonObject"
    }
  },
  {
    "label": "empty",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nempty(itemToTest: array | null | object | string): bool\n\n```  \nDetermines if an array, object, or string is empty.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_empty",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "empty($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "emptyArgInBetween",
    "kind": "variable",
    "detail": "emptyArgInBetween",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_emptyArgInBetween",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "emptyArgInBetween"
    }
  },
  {
    "label": "emptyParens",
    "kind": "variable",
    "detail": "emptyParens",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_emptyParens",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "emptyParens"
    }
  },
  {
    "label": "endsWith",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nendsWith(stringToSearch: string, stringToFind: string): bool\n\n```  \nDetermines whether a string ends with a value. The comparison is case-insensitive.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_endsWith",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "endsWith($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "environment",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nenvironment(): environment\n\n```  \nReturns information about the Azure environment used for deployment.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_environment",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "environment()$0"
    }
  },
  {
    "label": "eq",
    "kind": "variable",
    "detail": "eq",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_eq",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "eq"
    }
  },
  {
    "label": "errorInsideArrayAccess",
    "kind": "variable",
    "detail": "errorInsideArrayAccess",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_errorInsideArrayAccess",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "errorInsideArrayAccess"
    }
  },
  {
    "label": "extensionResourceId",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nextensionResourceId(resourceId: string, resourceType: string, ... : string): string\n\n```  \nReturns the resource ID for an [extension](https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/extension-resource-types) resource, which is a resource type that is applied to another resource to add to its capabilities.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_extensionResourceId",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "extensionResourceId($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "fakeFunc",
    "kind": "variable",
    "detail": "fakeFunc",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_fakeFunc",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "fakeFunc"
    }
  },
  {
    "label": "fakeFuncP",
    "kind": "field",
    "detail": "fakeFuncP",
    "documentation": {
      "kind": "markdown",
      "value": "Type: `string`  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "2_fakeFuncP",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "fakeFuncP"
    }
  },
  {
    "label": "fakeVar",
    "kind": "variable",
    "detail": "fakeVar",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_fakeVar",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "fakeVar"
    }
  },
  {
    "label": "falsehood",
    "kind": "variable",
    "detail": "falsehood",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_falsehood",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "falsehood"
    }
  },
  {
    "label": "filter",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nfilter(array: array, predicate: (any[, int]) => bool): array\n\n```  \nFilters an array with a custom filtering function.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_filter",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "filter($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "first",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nfirst(array: array): any\nfirst(string: string): string\n\n```  \nReturns the first element of the array, or first character of the string.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_first",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "first($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "flatten",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nflatten(array: array[]): array\n\n```  \nTakes an array of arrays, and returns an array of sub-array elements, in the original order. Sub-arrays are only flattened once, not recursively.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_flatten",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "flatten($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "format",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nformat(formatString: string, ... : any): string\n\n```  \nCreates a formatted string from input values.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_format",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "format($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "funcvarparam",
    "kind": "field",
    "detail": "funcvarparam",
    "documentation": {
      "kind": "markdown",
      "value": "Type: `bool`  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "2_funcvarparam",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "funcvarparam"
    }
  },
  {
    "label": "funcvarvar",
    "kind": "variable",
    "detail": "funcvarvar",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_funcvarvar",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "funcvarvar"
    }
  },
  {
    "label": "groupBy",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\ngroupBy(array: array, keyPredicate: any => string, [valuePredicate: any => any]): object\n\n```  \nConverts an array to an object containing a lookup from key to array values filtered by said key. Values can be optionally translated using a mapping function.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_groupBy",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "groupBy($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "gt",
    "kind": "variable",
    "detail": "gt",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_gt",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "gt"
    }
  },
  {
    "label": "gteq",
    "kind": "variable",
    "detail": "gteq",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_gteq",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "gteq"
    }
  },
  {
    "label": "guid",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nguid(... : string): string\n\n```  \nCreates a value in the format of a globally unique identifier based on the values provided as parameters.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_guid",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "guid($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "if-else",
    "kind": "snippet",
    "detail": "if-else",
    "deprecated": false,
    "preselect": false,
    "sortText": "1_if-else",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "${1:condition} ? ${2:TrueValue} : ${3:FalseValue}"
    }
  },
  {
    "label": "indexOf",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nindexOf(stringToSearch: string, stringToFind: string): int\nindexOf(array: array, itemToFind: any): int\n\n```  \nReturns the first position of a value within a string. The comparison is case-insensitive.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_indexOf",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "indexOf($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "indexOfWrongTypes",
    "kind": "variable",
    "detail": "indexOfWrongTypes",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_indexOfWrongTypes",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "indexOfWrongTypes"
    }
  },
  {
    "label": "int",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nint(valueToConvert: int | string): int\n\n```  \nConverts the specified value to an integer.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_int",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "int($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "integerIndexOnNonArray",
    "kind": "variable",
    "detail": "integerIndexOnNonArray",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_integerIndexOnNonArray",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "integerIndexOnNonArray"
    }
  },
  {
    "label": "intersection",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nintersection(... : object): object\nintersection(... : array): array\n\n```  \nReturns a single array or object with the common elements from the parameters.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_intersection",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "intersection($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "invalidIndexTypeOverAny",
    "kind": "variable",
    "detail": "invalidIndexTypeOverAny",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_invalidIndexTypeOverAny",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "invalidIndexTypeOverAny"
    }
  },
  {
    "label": "invalidInstanceFunctionAccess",
    "kind": "variable",
    "detail": "invalidInstanceFunctionAccess",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_invalidInstanceFunctionAccess",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "invalidInstanceFunctionAccess"
    }
  },
  {
    "label": "invalidInstanceFunctionCall",
    "kind": "variable",
    "detail": "invalidInstanceFunctionCall",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_invalidInstanceFunctionCall",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "invalidInstanceFunctionCall"
    }
  },
  {
    "label": "invalidOperands",
    "kind": "variable",
    "detail": "invalidOperands",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_invalidOperands",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "invalidOperands"
    }
  },
  {
    "label": "invalidPropertyAccessOnAzNamespace",
    "kind": "variable",
    "detail": "invalidPropertyAccessOnAzNamespace",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_invalidPropertyAccessOnAzNamespace",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "invalidPropertyAccessOnAzNamespace"
    }
  },
  {
    "label": "invalidPropertyAccessOnSysNamespace",
    "kind": "variable",
    "detail": "invalidPropertyAccessOnSysNamespace",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_invalidPropertyAccessOnSysNamespace",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "invalidPropertyAccessOnSysNamespace"
    }
  },
  {
    "label": "invalidPropertyCallOnInstanceFunctionAccess",
    "kind": "variable",
    "detail": "invalidPropertyCallOnInstanceFunctionAccess",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_invalidPropertyCallOnInstanceFunctionAccess",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "invalidPropertyCallOnInstanceFunctionAccess"
    }
  },
  {
    "label": "invalidStringAddition",
    "kind": "variable",
    "detail": "invalidStringAddition",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_invalidStringAddition",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "invalidStringAddition"
    }
  },
  {
    "label": "items",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nitems(object: object): object[]\n\n```  \nReturns an array of keys and values for an object. Elements are consistently ordered alphabetically by key.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_items",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "items($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "join",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\njoin(inputArray: (bool | int | string)[], delimiter: string): string\n\n```  \nJoins multiple strings into a single string, separated using a delimiter.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_join",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "join($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "json",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\njson(json: string): any\n\n```  \nConverts a valid JSON string into a JSON data type.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_json",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "json($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "justAComma",
    "kind": "variable",
    "detail": "justAComma",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_justAComma",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "justAComma"
    }
  },
  {
    "label": "last",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nlast(array: array): any\nlast(string: string): string\n\n```  \nReturns the last element of the array, or last character of the string.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_last",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "last($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "lastIndexOf",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nlastIndexOf(stringToSearch: string, stringToFind: string): int\nlastIndexOf(array: array, itemToFind: any): int\n\n```  \nReturns the last position of a value within a string. The comparison is case-insensitive.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_lastIndexOf",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "lastIndexOf($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "leadingAndTrailingEmptyArg",
    "kind": "variable",
    "detail": "leadingAndTrailingEmptyArg",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_leadingAndTrailingEmptyArg",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "leadingAndTrailingEmptyArg"
    }
  },
  {
    "label": "leadingEmptyArg",
    "kind": "variable",
    "detail": "leadingEmptyArg",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_leadingEmptyArg",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "leadingEmptyArg"
    }
  },
  {
    "label": "length",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nlength(arg: object | string): int\nlength(arg: array): int\n\n```  \nReturns the number of characters in a string, elements in an array, or root-level properties in an object.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_length",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "length($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "loadFileAsBase64",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nloadFileAsBase64(filePath: string): string\n\n```  \nLoads the specified file as base64 string. File loading occurs during compilation, not at runtime. The maximum allowed size is 96 Kb.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_loadFileAsBase64",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "loadFileAsBase64($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "loadJsonContent",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nloadJsonContent(filePath: string, [jsonPath: string], [encoding: 'iso-8859-1' | 'us-ascii' | 'utf-16' | 'utf-16BE' | 'utf-8']): any\n\n```  \nLoads the specified JSON file as bicep object. File loading occurs during compilation, not at runtime.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_loadJsonContent",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "loadJsonContent($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "loadTextContent",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nloadTextContent(filePath: string, [encoding: 'iso-8859-1' | 'us-ascii' | 'utf-16' | 'utf-16BE' | 'utf-8']): string\n\n```  \nLoads the content of the specified file into a string. Content loading occurs during compilation, not at runtime. The maximum allowed content size is 131072 characters (including line endings).  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_loadTextContent",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "loadTextContent($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "loadYamlContent",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nloadYamlContent(filePath: string, [pathFilter: string], [encoding: 'iso-8859-1' | 'us-ascii' | 'utf-16' | 'utf-16BE' | 'utf-8']): any\n\n```  \nLoads the specified YAML file as bicep object. File loading occurs during compilation, not at runtime.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_loadYamlContent",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "loadYamlContent($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "lt",
    "kind": "variable",
    "detail": "lt",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_lt",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "lt"
    }
  },
  {
    "label": "lteq",
    "kind": "variable",
    "detail": "lteq",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_lteq",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "lteq"
    }
  },
  {
    "label": "malformedStringIndex",
    "kind": "variable",
    "detail": "malformedStringIndex",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_malformedStringIndex",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "malformedStringIndex"
    }
  },
  {
    "label": "managementGroup",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nmanagementGroup(name: string): managementGroup\n\n```  \nReturns a management group scope.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_managementGroup",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "managementGroup($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "managementGroupResourceId",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nmanagementGroupResourceId(resourceType: string, ... : string): string\nmanagementGroupResourceId(managementGroupId: string, resourceType: string, ... : string): string\n\n```  \nReturns the unique identifier for a resource deployed at the management group level.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_managementGroupResourceId",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "managementGroupResourceId($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "map",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nmap(array: array, predicate: (any[, int]) => any): array\n\n```  \nApplies a custom mapping function to each element of an array and returns the result array.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_map",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "map($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "mapValues",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nmapValues(object: object, predicate: any => any): array\n\n```  \nApplies a custom mapping function to the values of an object and returns the result object.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_mapValues",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "mapValues($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "max",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nmax(... : int): int\nmax(intArray: int[]): int\n\n```  \nReturns the maximum value from an array of integers or a comma-separated list of integers.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_max",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "max($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "min",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nmin(... : int): int\nmin(intArray: int[]): int\n\n```  \nReturns the minimum value from an array of integers or a comma-separated list of integers.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_min",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "min($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "minus",
    "kind": "variable",
    "detail": "minus",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_minus",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "minus"
    }
  },
  {
    "label": "missingIndexerOnIdentifier",
    "kind": "variable",
    "detail": "missingIndexerOnIdentifier",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_missingIndexerOnIdentifier",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "missingIndexerOnIdentifier"
    }
  },
  {
    "label": "missingIndexerOnLiteralArray",
    "kind": "variable",
    "detail": "missingIndexerOnLiteralArray",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_missingIndexerOnLiteralArray",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "missingIndexerOnLiteralArray"
    }
  },
  {
    "label": "missingMethodName",
    "kind": "variable",
    "detail": "missingMethodName",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_missingMethodName",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "missingMethodName"
    }
  },
  {
    "label": "missingPropertyInsideAnExpression",
    "kind": "variable",
    "detail": "missingPropertyInsideAnExpression",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_missingPropertyInsideAnExpression",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "missingPropertyInsideAnExpression"
    }
  },
  {
    "label": "missingPropertyName",
    "kind": "variable",
    "detail": "missingPropertyName",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_missingPropertyName",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "missingPropertyName"
    }
  },
  {
    "label": "mod",
    "kind": "variable",
    "detail": "mod",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_mod",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "mod"
    }
  },
  {
    "label": "mul",
    "kind": "variable",
    "detail": "mul",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_mul",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "mul"
    }
  },
  {
    "label": "multipleArgumentCommas",
    "kind": "variable",
    "detail": "multipleArgumentCommas",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_multipleArgumentCommas",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "multipleArgumentCommas"
    }
  },
  {
    "label": "ne",
    "kind": "variable",
    "detail": "ne",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_ne",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "ne"
    }
  },
  {
    "label": "nestedTernary",
    "kind": "variable",
    "detail": "nestedTernary",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_nestedTernary",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "nestedTernary"
    }
  },
  {
    "label": "noElements",
    "kind": "variable",
    "detail": "noElements",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_noElements",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "noElements"
    }
  },
  {
    "label": "not",
    "kind": "variable",
    "detail": "not",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_not",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "not"
    }
  },
  {
    "label": "nullness",
    "kind": "variable",
    "detail": "nullness",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_nullness",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "nullness"
    }
  },
  {
    "label": "objectKeys",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nobjectKeys(object: object): string[]\n\n```  \nReturns an array of object keys. Elements are consistently ordered alphabetically.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_objectKeys",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "objectKeys($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "oneValidDeclaration",
    "kind": "variable",
    "detail": "oneValidDeclaration",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_oneValidDeclaration",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "oneValidDeclaration"
    }
  },
  {
    "label": "onlyArgumentComma",
    "kind": "variable",
    "detail": "onlyArgumentComma",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_onlyArgumentComma",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "onlyArgumentComma"
    }
  },
  {
    "label": "or",
    "kind": "variable",
    "detail": "or",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_or",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "or"
    }
  },
  {
    "label": "padLeft",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\npadLeft(valueToPad: int | string, totalLength: int, [paddingCharacter: string]): string\n\n```  \nReturns a right-aligned string by adding characters to the left until reaching the total specified length.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_padLeft",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "padLeft($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "padLeftNotEnough",
    "kind": "variable",
    "detail": "padLeftNotEnough",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_padLeftNotEnough",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "padLeftNotEnough"
    }
  },
  {
    "label": "parseCidr",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nparseCidr(network: string): parseCidr\n\n```  \nParses an IP address range in CIDR notation to get various properties of the address range.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_parseCidr",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "parseCidr($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "partialObject",
    "kind": "variable",
    "detail": "partialObject",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_partialObject",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "partialObject"
    }
  },
  {
    "label": "pickZones",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\npickZones(providerNamespace: string, resourceType: string, location: string, [numberOfZones: int], [offset: int]): array\n\n```  \nDetermines whether a resource type supports zones for a region.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_pickZones",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "pickZones($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "propertyAccessOnVariable",
    "kind": "variable",
    "detail": "propertyAccessOnVariable",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_propertyAccessOnVariable",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "propertyAccessOnVariable"
    }
  },
  {
    "label": "providers",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nproviders(providerNamespace: string): Provider\nproviders(providerNamespace: string, resourceType: string): ProviderResource\n\n```  \nReturns information about a resource provider and its supported resource types. If you don't provide a resource type, the function returns all the supported types for the resource provider.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_providers",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "providers($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "range",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nrange(startIndex: int, count: int): int[]\n\n```  \nCreates an array of integers from a starting integer and containing a number of items.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_range",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "range($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "reduce",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nreduce(array: array, initialValue: any, predicate: (any, any[, int]) => any): array\n\n```  \nReduces an array with a custom reduce function.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_reduce",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "reduce($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "reference",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nreference(resourceNameOrIdentifier: string, [apiVersion: string], [full: string]): object\n\n```  \nReturns an object representing a resource's runtime state.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_reference",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "reference($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "replace",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nreplace(originalString: string, oldString: string, newString: string): string\n\n```  \nReturns a new string with all instances of one string replaced by another string.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_replace",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "replace($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "resourceGroup",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nresourceGroup(): resourceGroup\nresourceGroup(resourceGroupName: string): resourceGroup\nresourceGroup(subscriptionId: string, resourceGroupName: string): resourceGroup\n\n```  \nReturns a resource group scope.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_resourceGroup",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "resourceGroup($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "resourceId",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nresourceId(resourceType: string, ... : string): string\nresourceId(subscriptionId: string, resourceType: string, ... : string): string\nresourceId(resourceGroupName: string, resourceType: string, ... : string): string\nresourceId(subscriptionId: string, resourceGroupName: string, resourceType: string, ... : string): string\n\n```  \nReturns the unique identifier of a resource. You use this function when the resource name is ambiguous or not provisioned within the same template. The format of the returned identifier varies based on whether the deployment happens at the scope of a resource group, subscription, management group, or tenant.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_resourceId",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "resourceId($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "sampleObject",
    "kind": "variable",
    "detail": "sampleObject",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_sampleObject",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "sampleObject"
    }
  },
  {
    "label": "shallowMerge",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nshallowMerge(entries: object[]): object\n\n```  \nReturns a single array or object with all elements from the parameters. Duplicate values or keys are only included once.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_shallowMerge",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "shallowMerge($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "skip",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nskip(originalValue: array, numberToSkip: int): array\nskip(originalValue: string, numberToSkip: int): string\n\n```  \nReturns a string with all the characters after the specified number of characters, or an array with all the elements after the specified number of elements.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_skip",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "skip($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "sort",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nsort(array: array, predicate: (any, any) => bool): array\n\n```  \nSorts an array with a custom sort function.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_sort",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "sort($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "split",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nsplit(inputString: string, delimiter: array | string): string[]\n\n```  \nReturns an array of strings that contains the substrings of the input string that are delimited by the specified delimiters.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_split",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "split($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "startsWith",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nstartsWith(stringToSearch: string, stringToFind: string): bool\n\n```  \nDetermines whether a string starts with a value. The comparison is case-insensitive.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_startsWith",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "startsWith($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "string",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nstring(valueToConvert: any): string\n\n```  \nConverts the specified value to a string.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_string",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "string($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "stringIndexOnNonObject",
    "kind": "variable",
    "detail": "stringIndexOnNonObject",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_stringIndexOnNonObject",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "stringIndexOnNonObject"
    }
  },
  {
    "label": "sub",
    "kind": "variable",
    "detail": "sub",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_sub",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "sub"
    }
  },
  {
    "label": "subscription",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nsubscription(): subscription\nsubscription(subscriptionId: string): subscription\n\n```  \nReturns a subscription scope.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_subscription",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "subscription($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "subscriptionResourceId",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nsubscriptionResourceId(resourceType: string, ... : string): string\nsubscriptionResourceId(subscriptionId: string, resourceType: string, ... : string): string\n\n```  \nReturns the unique identifier for a resource deployed at the subscription level.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_subscriptionResourceId",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "subscriptionResourceId($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "substring",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nsubstring(stringToParse: string, startIndex: int, [length: int]): string\n\n```  \nReturns a substring that starts at the specified character position and contains the specified number of characters.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_substring",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "substring($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "sys",
    "kind": "folder",
    "detail": "sys",
    "deprecated": false,
    "preselect": false,
    "sortText": "3_sys",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "sys."
    },
    "command": {
      "title": "symbol completion",
      "command": "editor.action.triggerSuggest"
    }
  },
  {
    "label": "sysFunctions",
    "kind": "variable",
    "detail": "sysFunctions",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_sysFunctions",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "sysFunctions"
    }
  },
  {
    "label": "sysFunctionsInParens",
    "kind": "variable",
    "detail": "sysFunctionsInParens",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_sysFunctionsInParens",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "sysFunctionsInParens"
    }
  },
  {
    "label": "take",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\ntake(originalValue: array, numberToTake: int): array\ntake(originalValue: string, numberToTake: int): string\n\n```  \nReturns an array or string. An array has the specified number of elements from the start of the array. A string has the specified number of characters from the start of the string.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_take",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "take($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "takeTooMany",
    "kind": "variable",
    "detail": "takeTooMany",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_takeTooMany",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "takeTooMany"
    }
  },
  {
    "label": "tenant",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\ntenant(): tenant\n\n```  \nReturns the current tenant scope.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_tenant",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "tenant()$0"
    }
  },
  {
    "label": "tenantResourceId",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\ntenantResourceId(resourceType: string, ... : string): string\n\n```  \nReturns the unique identifier for a resource deployed at the tenant level.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_tenantResourceId",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "tenantResourceId($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "ternary",
    "kind": "variable",
    "detail": "ternary",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_ternary",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "ternary"
    }
  },
  {
    "label": "test1",
    "kind": "variable",
    "detail": "test1",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_test1",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "test1"
    }
  },
  {
    "label": "test2",
    "kind": "variable",
    "detail": "test2",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_test2",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "test2"
    }
  },
  {
    "label": "test3",
    "kind": "variable",
    "detail": "test3",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_test3",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "test3"
    }
  },
  {
    "label": "threeElements",
    "kind": "variable",
    "detail": "threeElements",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_threeElements",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "threeElements"
    }
  },
  {
    "label": "toLower",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\ntoLower(stringToChange: string): string\n\n```  \nConverts the specified string to lower case.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_toLower",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "toLower($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "toObject",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\ntoObject(array: array, keyPredicate: any => string, [valuePredicate: any => any]): object\n\n```  \nConverts an array to an object with a custom key function and optional custom value function.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_toObject",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "toObject($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "toUpper",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\ntoUpper(stringToChange: string): string\n\n```  \nConverts the specified string to upper case.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_toUpper",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "toUpper($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "trailingArgumentComma",
    "kind": "variable",
    "detail": "trailingArgumentComma",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_trailingArgumentComma",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "trailingArgumentComma"
    }
  },
  {
    "label": "trim",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\ntrim(stringToTrim: string): string\n\n```  \nRemoves all leading and trailing white-space characters from the specified string.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_trim",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "trim($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "truth",
    "kind": "variable",
    "detail": "truth",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_truth",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "truth"
    }
  },
  {
    "label": "twoElements",
    "kind": "variable",
    "detail": "twoElements",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_twoElements",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "twoElements"
    }
  },
  {
    "label": "union",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nunion(... : object): object\nunion(... : array): array\n\n```  \nReturns a single array or object with all elements from the parameters. Duplicate values or keys are only included once.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_union",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "union($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "uniqueString",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nuniqueString(... : string): string\n\n```  \nCreates a deterministic hash string based on the values provided as parameters. The returned value is 13 characters long.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_uniqueString",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "uniqueString($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "unterminated1",
    "kind": "variable",
    "detail": "unterminated1",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_unterminated1",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "unterminated1"
    }
  },
  {
    "label": "uri",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nuri(baseUri: string, relativeUri: string): string\n\n```  \nCreates an absolute URI by combining the baseUri and the relativeUri string.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_uri",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "uri($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "uriComponent",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nuriComponent(stringToEncode: string): string\n\n```  \nEncodes a URI.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_uriComponent",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "uriComponent($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "uriComponentToString",
    "kind": "function",
    "documentation": {
      "kind": "markdown",
      "value": "```bicep\nuriComponentToString(uriEncodedString: string): string\n\n```  \nReturns a string of a URI encoded value.  \n"
    },
    "deprecated": false,
    "preselect": false,
    "sortText": "3_uriComponentToString",
    "insertTextFormat": "snippet",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "uriComponentToString($0)"
    },
    "command": {
      "title": "signature help",
      "command": "editor.action.triggerParameterHints"
    }
  },
  {
    "label": "x",
    "kind": "variable",
    "detail": "x",
    "deprecated": false,
    "preselect": false,
    "sortText": "2_x",
    "insertTextFormat": "plainText",
    "insertTextMode": "adjustIndentation",
    "textEdit": {
      "range": {},
      "newText": "x"
    }
  }
]