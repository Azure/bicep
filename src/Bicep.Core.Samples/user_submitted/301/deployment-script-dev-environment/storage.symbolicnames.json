{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "1.9-experimental",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
    "_generator": {
      "name": "bicep",
      "version": "dev",
      "templateHash": "3979230528101032463"
    }
  },
  "parameters": {
    "name": {
      "type": "string"
    },
    "sku": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Standard_ZRS",
        "Premium_LRS",
        "Premium_ZRS",
        "Standard_GZRS",
        "Standard_RAGZRS"
      ]
    },
    "kind": {
      "type": "string",
      "defaultValue": "StorageV2",
      "allowedValues": [
        "Storage",
        "StorageV2",
        "BlobStorage",
        "FileStorage",
        "BlockBlobStorage"
      ]
    },
    "accessTier": {
      "type": "string",
      "defaultValue": "Hot",
      "allowedValues": [
        "Hot",
        "Cool"
      ]
    },
    "fileShareName": {
      "type": "string",
      "defaultValue": "deployscript"
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().id]"
    }
  },
  "resources": {
    "storage": {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('sku')]"
      },
      "kind": "[parameters('kind')]",
      "properties": {
        "accessTier": "[parameters('accessTier')]"
      }
    },
    "fileshare": {
      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
      "apiVersion": "2019-06-01",
      "name": "[format('{0}/default/{1}', resourceInfo('storage').name, parameters('fileShareName'))]",
      "dependsOn": [
        "storage"
      ]
    }
  },
  "outputs": {
    "resourceId": {
      "type": "string",
      "value": "[resourceInfo('storage').id]"
    },
    "storageName": {
      "type": "string",
      "value": "[resourceInfo('storage').name]"
    },
    "fileShareName": {
      "type": "string",
      "value": "[parameters('fileShareName')]"
    }
  }
}