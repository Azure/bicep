// Ideas demonstrated in this file:

// Artifact types: parameter, variable, condition, list, resource.

// Artifact definition: <artifact type> [artifact identifier] {<artifact specific syntax>}

// Reference to an artifact definition: <artifact type (short version)>.<artifact identifier>
// such as: param.location, var.accountName, resource.dbAccount, list.databaseContainerList, condition.createAccount

// Folding regions. Use matching # <region identifier> pairs, such as #parameters, or #variables.
// Regions can be nested, but can't be partially overlapping.

// Artifact metadata block. An optional block appended to an artifact definition in form of: <artifact type> {<artifact specific sytax>} with {<artifact metadata block>}
// Refer to list.databaseContainerList for a more detailed example.

// Artifact scope. All artifacts by default exist in the global scope of the .arm file, unless otherwise specified in an artifact's metadata block using keyword: scope.
// Refer to list.databaseContainerList for a more detailed example.

// Conditional artifact. condition [artifact identifier] <boolean evaluation logic> { whenTrue: {<logic when condition evaluated true} [whenFalse: {<optional logic when condition evaluated false.>}]}
// Either artifact definitions or their references can be included in a conditional aritifact.
// Artifact references are recommended for complex artifacts to keep conditional definition short and easy to read.

// List artifact. list [artifact identifier] for <index identifier> in <set of artifacts> {<list body>}

#parameters
parameter accountName string {
    defaultValue: $'sql-{uniqueString(resourceGroup().id)}'
    minLength: 3
    maxLength: 44
    description: 'Cosmos DB account name'
}

parameter location string {
    defaultValue: resourceGroup().location
    description: 'Location for the Cosmos DB account'
}

parameter primaryRegion string {
    description: 'The primary replica region for the Cosmos DB account'
}

parameter secondaryRegion string {
    description: 'The secondary replica region for the Cosmos DB account'
}

parameter defaultConsistencyLevel string {
    defaultValue: 'Session',
    allowedValues: [
        'Eventual',
        'ConsistentPrefix',
        'Session',
        'BoundedStaleness',
        'Strong'
    ],
    description: 'The default consistency level of the Cosmos DB account'
}

parameter maxStalenessPrefix int {
    minValue: 10,
    maxValue: 2147483647,
    defaultValue: 100000,
    description: 'Max stale requests. Required for BoundedStaleness.'
}

parameter maxIntervalInSeconds int {
    minValue: 5,
    maxValue: 86400,
    defaultValue: 300,
    description: 'Max lag time (minutes). Required for BoundedStaleness.'
}

parameter automaticFailover bool {
    defaultValue: true,
    allowedValues: [
        true,
        false
    ],
    description: 'Enable automatic failover for regions'
}

parameter databaseName array {
    defaultValue: [
        {
            'raw'
        }
    ],
    description: The variable determines the name of each database that's created.  Duplicate names are not allowed'
}

parameter containerReference array {
    defaultValue: [
        {
            databaseName: 'raw',
            containerName: 'raw-1',
            partitionKey: 'key1',
            containerThroughput: 400
        }
    ],
    description: 'The variable is used together with containerName, partitionKey and containerThroughput to create determine which container is created under what database.  Duplicates are allowed'
}

parameter throughput int {
    defaultValue: 400,
    minValue: 400,
    maxValue: 1000000,
    description: 'The throughput for the container'
}

parameter createNewAccount bool {
    defaultValue: true,
    description: 'A switch to decide if to create a new account'
}
#parameters

#variables
variable accountName = toLower(param.accountName)

variable consistencyPolicy = {
    Eventual: {
        defaultConsistencyLevel: 'Eventual'
    },
    ConsistentPrefix: {
        defaultConsistencyLevel: 'ConsistentPrefix'
    },
    Session: {
        defaultConsistencyLevel: 'Session'
    },
    BoundedStaleness: {
        defaultConsistencyLevel: 'BoundedStaleness',
        maxStalenessPrefix: param.maxStalenessPrefix,
        maxIntervalInSeconds: param.maxIntervalInSeconds
    },
    Strong: {
        defaultConsistencyLevel: 'Strong'
    }
}

variable locations = [
    {
        locationName: param.primaryRegion,
        failoverPriority: 0,
        isZoneRedundant: false
    },
    {
        locationName: param.secondaryRegion,
        failoverPriority: 1,
        isZoneRedundant: false
    }
]

variable apiVersion = '2020-03-01'

#variables

#resources
condition createAccount param.createNewAccount {
    whenTrue: {
        // Three artifacts in whenTrue block.

        // 1. Resource dbAccount that is defined after this conditional block but referenced here using the resource.dbAccount notation.
        resource.dbAccount

        // 2. A list of resources that exists in this conditional scope.
        list sqlDatabaseList for dbindex in length(param.databaseName) {
            resource $'Microsoft.DocumentDB/databaseAccounts/sqlDatabases@{var.apiVersion}' {
                name: $'{var.accountName/param.databaseName[dbIndex]}',
                dependsOn: dbAccount,
                properties: {
                    resource: {
                        id: param.databaseName[dbIndex],
                        options: {}
                    }
                }
            }
        }

        // 3. A list of resources that are defined after this conditional block but referenced here using the list.databaseContainerList notation.
        list.databasesContainerList
    }
    // can have a whenFalse block if necessary.
}

// Definition of resource dbAccount.
resource dbAccount $'Microsoft.DocumentDB/databaseAccounts@{var.apiVersion}' {
    name: var.accountName,
    kind: 'GlobalDocumentDB',
    location: param.location,
    properties: {
        consistencyPolicy: var.consistencyPolicy[param.defaultConsistencyLevel],
        locations: var.locations,
        databaseAccountOffertype; 'Standard',
        enableAutomaticFailover: param.automaticFailover
    }
} with
{
    // Indicate this resource exists only in scope of conditon.createAccount.whenTrue block.
    scope: condition.createAccount.whenTrue
}

list databaseContainerList for containerIndex in length(param.containerReference)
{
    resource container $'Microsoft.DocumentDB/databaseAccounts/sqlDatabase/containers@{var.apiVersion}}' {
        name: $'{var.accountName}/{param.containerReference[containerIndex].databaseName}/{param.containerReference[containerIndex].containerName}',
        dependsOn: sqlDatabaseList,
        properties: {
            resource: {
                id: $'{param.containerReference[containerIndex].containerName}',
                partitionKey: {
                    paths: [
                        '/myPartitionKey'
                    ],
                    containerReference
                },
                indexingPolicy: {
                    indexingMode: 'consistent',
                    includedPaths: [
                        path: '/*'
                    ],
                    excludedPaths: [
                        path: '/myPathToNotIndex/*'
                    ],
                    compositeIndexes: [
                        [
                            {
                                path: '/name',
                                order: 'ascending'
                            },
                            {
                                path: '/age',
                                order: 'descending'
                            }
                        ]
                    ],
                    spatialIndexes: [
                        {
                            path: '/path/to/geojson/property/?',
                            types: [
                                'Point',
                                'Polygon',
                                'MultiPolygon',
                                'LineString'
                            ]
                        }
                    ]
                },
                defaultTtl: 86400,
                uniqueKeyPolicy: {
                    uniqueKeys: [
                        {
                            paths: [
                                '/phoneNumber'
                            ]
                        }
                    ]
                }
            },
            options: {
                throughput: param.throughput
            }
        }
    }
} with
{
    // Metadata describing how list of resources should be deployed.
    mode:'serial
    batchSize:3

    // Indicate this resource exists only in scope of conditon.createAccount.whenTrue block.
    scope: condition.createAccount.whenTrue
}

#resources
